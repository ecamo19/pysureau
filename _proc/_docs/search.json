[
  {
    "objectID": "modeling_options_utils.html",
    "href": "modeling_options_utils.html",
    "title": "Modeling options utils",
    "section": "",
    "text": "source\n\ncreate_empty_modeling_options_file\n\n create_empty_modeling_options_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the modeling options file\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary file for user input\n\n\n\n\nsource\n\n\nread_modeling_options_file\n\n read_modeling_options_file (file_path:pathlib._local.Path, sep:str=',')\n\nCreate a dictionary containing modeling options that can be used as an input in run.SurEauR\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\n\n\n\n\n\nread_modeling_options_file(\n    '/tmp/pysureau_project_8osWFnip/1_parameter_files/modeling_options.csv'\n)\n\n{'eord': 1,\n 'lcav': 1,\n 'scav': 1,\n 'latitude': 90.0,\n 'longitude': 80.0,\n 'year_end': 2000.0,\n 'year_start': 1900.0,\n 'time_step_for_evapo': 1,\n 'threshold_mortality': 90.0,\n 'transpiration_granier_arg_c': 0.0,\n 'custom_small_time_step_in_sec': 600.0,\n 'transpiration_granier_arg_b': 0.134,\n 'transpiration_granier_arg_a': -0.006,\n 'print_prog': 'False',\n 'defoliation': 'False',\n 'constant_climate': 'False',\n 'output_overwrite': 'False',\n 'output_type': 'simple',\n 'pet_formulation': 'pt',\n 'rn_formulation': 'linacre',\n 'numerical_scheme': 'implicit',\n 'resolution_output': 'subdaily',\n 'transpiration_model': 'granier',\n 'comp_options_for_evapo': 'normal',\n 'stomatal_reg_formulation': 'sigmoid',\n 'output_path': '/tmp/pysureau_project_8osWFnip/2_model_outputs',\n 'time': array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n        17, 18, 19, 20, 21, 22, 23]),\n 'comp_options': defaultdict(list,\n             {'numerical_scheme': 'implicit',\n              'nsmalltimesteps': array([ 6, 10, 20, 60]),\n              'lsym': 1,\n              'ssym': 1,\n              'clapo': 1,\n              'ctapo': 1,\n              'eord': 1,\n              'lcav': 1,\n              'scav': 1}),\n 'transpiration_granier_args': defaultdict(list,\n             {'a': -0.006, 'b': 0.134, 'c': 0.0}),\n 'stop_simulation_dead_plant': 'False'}",
    "crumbs": [
      "Modeling options utils"
    ]
  },
  {
    "objectID": "conversions_utils.html",
    "href": "conversions_utils.html",
    "title": "Conversions functions utils",
    "section": "",
    "text": "source",
    "crumbs": [
      "Conversions functions utils"
    ]
  },
  {
    "objectID": "conversions_utils.html#functions-of-conversion-and-temporal-disagregation-of-climatic-variable-as-well-as-pet-computation",
    "href": "conversions_utils.html#functions-of-conversion-and-temporal-disagregation-of-climatic-variable-as-well-as-pet-computation",
    "title": "Conversions functions utils",
    "section": "Functions of conversion and temporal disagregation of climatic variable as well as PET computation",
    "text": "Functions of conversion and temporal disagregation of climatic variable as well as PET computation\n\nsource\n\ncompute_vpd_from_temp_rh\n\n compute_vpd_from_temp_rh (relative_humidity:float, temperature:float,\n                           air_pressure:float=101325)\n\nCompute vapor pressure deficit (VPD) from air relative humidity (rh) and air temperature (temp)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrelative_humidity\nfloat\n\nAir relative_humidity (%)\n\n\ntemperature\nfloat\n\nAir temperature (degrees Celsius)\n\n\nair_pressure\nfloat\n101325\nAir pressure (Pa)\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: Compute VPD\n\ncompute_vpd_from_temp_rh(relative_humidity=70, temperature=55)\n\narray([4.76019573])\n\n\n\ncompute_vpd_from_temp_rh(relative_humidity=25, temperature=np.array([80, 90]))\n\narray([36.10624792, 53.70318944])\n\n\n\nsource\n\n\n\ncompute_slope_sat\n\n compute_slope_sat (tmoy:float)\n\nCompute slope of the saturation vapour pressure function (AO 1998)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntmoy\nfloat\nMean daily temperature in °C\n\n\nReturns\nfloat\nSlope of the saturation vapour pressure function\n\n\n\n\nsource\n\n\ncompute_pet\n\n compute_pet (tmoy:float, net_radiation:float, g:float=0, vpd:float=None,\n              wind_speed_u:float=None, pt_coeff:float=None,\n              formulation:str='pt')\n\nCalcule Potential Evapotranspiration (mm) PET using Pristeley Taylor (pt) or Penmman (penman) formulation\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntmoy\nfloat\n\nMean temperature over the considered time step (degrees Celsius)\n\n\nnet_radiation\nfloat\n\nCumulative Net radiation over the considered time sep (MJ.m2)\n\n\ng\nfloat\n0\nEnergy storage parameter. Represents ground heat flux\n\n\nvpd\nfloat\nNone\nVapor pressure deficit (kpa) for calculating etp using the Penman-Monteith (penman) formulation\n\n\nwind_speed_u\nfloat\nNone\nWind speed (m.s-1) for calculating etp using the Penman-monteith (penman) formulation\n\n\npt_coeff\nfloat\nNone\nAn empirical constant accounting for the vapor pressure deficit and resistance values. Typically, α is 1.26 for open bodies of water, but has a wide range of values from less than 1 (humid conditions) to almost 2 (arid conditions).\n\n\nformulation\nstr\npt\nString indicating which formulation to use (Pristeley Taylor (pt) or Penman-Monteith (penman)) for calculating potential evapotranspiration\n\n\nReturns\nfloat\n\nPotential evapotranspiration (PET) (mm)\n\n\n\n\nExample: Compute Potential Evapotranspiration\n\ncompute_pet(tmoy=80, net_radiation=25, formulation='pt')\n\n\ncompute_pet(\n    tmoy=20, net_radiation=1, wind_speed_u=2, vpd=2, formulation='penman'\n)\n\n\ncompute_pet(\n    tmoy=15, net_radiation=5, wind_speed_u=2, vpd=1, formulation='penman'\n)\n\n1.126055124868983\n\n\n\nsource\n\n\n\ncalculate_radiation_diurnal_pattern\n\n calculate_radiation_diurnal_pattern (time_of_day:int, day_length:int)\n\nCalculated diurnal pattern of temperature assuming a sinusoidal pattern with T = tmin at sunrise and T = (tmin + tmax)/2 at sunset. From sunset to sunrise follows a linear trend\n\n\n\n\nType\nDetails\n\n\n\n\ntime_of_day\nint\nNumeric value of vector indicating the time of the day (in seconds)\n\n\nday_length\nint\nValue indicating the duration of the day (in seconds). Calculated using the day_length function\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate radiation diurnal pattern\n\ncalculate_radiation_diurnal_pattern(time_of_day=1, day_length=40)\n\n\nsource\n\n\n\ncalculate_temperature_diurnal_pattern\n\n calculate_temperature_diurnal_pattern (time_of_day:float, day_length:int,\n                                        tmin:float, tmax:float,\n                                        tmin_prev:float, tmax_prev:float,\n                                        tmin_next:float)\n\nCalculated diurnal pattern of temperature assuming a sinusoidal pattern with T = tmin at sunrise and T = (tmin+tmax)/2 at sunset. From sunset to sunrise follows a linear trend\n\n\n\n\nType\nDetails\n\n\n\n\ntime_of_day\nfloat\nValue of vector indicating the time of the day (in seconds from sunrise)\n\n\nday_length\nint\nValue indicating the duration of the day (in seconds). Calculated using the day_length function\n\n\ntmin\nfloat\nMinimum temperature (in degrees C) of the target day of the year\n\n\ntmax\nfloat\nMaximum temperature (in degrees C) of the target day of the year\n\n\ntmin_prev\nfloat\nMinimum temperature (in degrees C) of the previous target day of the year\n\n\ntmax_prev\nfloat\nMaximum temperature (in degrees C) of the previous target day of the year\n\n\ntmin_next\nfloat\nMinimum temperature (in degrees C) of the next target day of the year\n\n\nReturns\nfloat\nTemperature at the given time\n\n\n\n\nExample: calculate the temperature diurnal pattern\n\ncalculate_temperature_diurnal_pattern(\n    time_of_day=0,\n    day_length=0,\n    tmin=0.6,\n    tmax=8.2,\n    tmin_prev=2.6,\n    tmax_prev=11.3,\n    tmin_next=4.7,\n)\n\n\nsource\n\n\n\ncalculate_rh_diurnal_pattern\n\n calculate_rh_diurnal_pattern (temperature:float, rhmin:float,\n                               rhmax:float, tmin:float, tmax:float)\n\nCalculate diurnal pattern of relative humidity from temperature\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntemperature\nfloat\nNumeric value providing the target temperature (degrees C) at which we should compute target rh\n\n\nrhmin\nfloat\nNumeric value indicating the minimum relative humidity (%) of the day\n\n\nrhmax\nfloat\nNumeric value indicating the maximum relative humidity (%) of the day\n\n\ntmin\nfloat\nNumeric value indicating the minimum daily temperature (degrees C)\n\n\ntmax\nfloat\nNumeric value indicating the maximum daily temperature (degrees C)\n\n\nReturns\nfloat\nRelative humidity at given temperature\n\n\n\n\ncalculate_rh_diurnal_pattern(17, 40, 80, 15, 25)\n\n72.0\n\n\n\nsource\n\n\nglobal_radiation_conversions_watts_ppfd\n\n global_radiation_conversions_watts_ppfd (rg_ppfd:float=None,\n                                          rg_watts:float=None,\n                                          j_to_mol:float=4.6,\n                                          frac_par:float=0.5, selected_con\n                                          version:str='rg_watts_to_rg_ppfd\n                                          _umol')\n\nConvert Global Radiation (rg) in watts to Photosynthetic Photon Flux Density (ppfd) in umol and viceversa\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrg_ppfd\nfloat\nNone\nPhotosynthetic photon flux density (umol.m-2.s-1)\n\n\nrg_watts\nfloat\nNone\nGlobal radiation (W/m2)\n\n\nj_to_mol\nfloat\n4.6\nConversion factor\n\n\nfrac_par\nfloat\n0.5\nFraction of solar radiation that is photosynthetically active radiation (PAR)\n\n\nselected_conversion\nstr\nrg_watts_to_rg_ppfd_umol\nString indicating to what units rg should be converted. Options ‘rg_ppfd_umol_to_rg_watts’ or ‘rg_watts_to_rg_ppfd_umol’\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: Calculate Global radiation in Watts and in PPFD\n\nglobal_radiation_conversions_watts_ppfd(\n    rg_watts=7,\n    j_to_mol=4.6,\n    frac_par=0.5,\n    selected_conversion='rg_watts_to_rg_ppfd_umol',\n)\n\nGlobal radiation (rg) converted from watts to ppfd\n\n\n/tmp/ipykernel_613/1345094339.py:41: UserWarning: Using j_to_mol default value of 4.6\n  warnings.warn('Using j_to_mol default value of 4.6')\n/tmp/ipykernel_613/1345094339.py:44: UserWarning: Using frac_par default value of 0.5\n  warnings.warn('Using frac_par default value of 0.5')\n\n\n16.099999999999998\n\n\n\nglobal_radiation_conversions_watts_ppfd(\n    rg_ppfd=9,\n    j_to_mol=4.6,\n    frac_par=0.5,\n    selected_conversion='rg_ppfd_umol_to_rg_watts',\n)\n\nGlobal radiation (rg) converted from ppfd to watts\n\n\n/tmp/ipykernel_10557/2430486604.py:40: UserWarning: Using j_to_mol default value of 4.6\n  warnings.warn('Using j_to_mol default value of 4.6')\n/tmp/ipykernel_10557/2430486604.py:43: UserWarning: Using frac_par default value of 0.5\n  warnings.warn('Using frac_par default value of 0.5')\n\n\n3.91304347826087\n\n\n\nglobal_radiation_conversions_watts_ppfd(\n    rg_watts=5,\n    j_to_mol=4.6,\n    frac_par=0.5,\n    selected_conversion='rg_watts_to_rg_ppfd_umol',\n)\n\nGlobal radiation (rg) converted from watts to ppfd\n\n\n/tmp/ipykernel_10557/2430486604.py:40: UserWarning: Using j_to_mol default value of 4.6\n  warnings.warn('Using j_to_mol default value of 4.6')\n/tmp/ipykernel_10557/2430486604.py:43: UserWarning: Using frac_par default value of 0.5\n  warnings.warn('Using frac_par default value of 0.5')\n\n\n11.5\n\n\n\nsource\n\n\n\nglobal_radiation_conversions_watts_mjules\n\n global_radiation_conversions_watts_mjules (rg_watts:float=None,\n                                            rg_mj:float=None,\n                                            nhours:float=None, selected_co\n                                            nversion:str='rg_watts_to_rg_m\n                                            j')\n\nConvert instantaneous radiation in watts to daily cumulative radiation in MJ (MJ.day-1) and viceversa\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrg_watts\nfloat\nNone\nInstantaneous radiation (watts)\n\n\nrg_mj\nfloat\nNone\nInstantaneous radiation (in Mega Jules?)\n\n\nnhours\nfloat\nNone\nNumber of hours of sun in the day\n\n\nselected_conversion\nstr\nrg_watts_to_rg_mj\nString indicating to what units rg should be converted. Options are ‘rg_watts_to_rg_mj’, ‘rg_mj_to_rg_watts’, ‘rg_mj_to_rg_watts_hour’, ‘rg_watts_to_rg_mjday’ or ‘rg_mjday_to_rg_watts’\n\n\nReturns\nfloat\n\n\n\n\n\n\nExample: Calculate Global radiation in Watts and in Mega Jules\n\nglobal_radiation_conversions_watts_mjules(\n    rg_watts=300, selected_conversion='rg_watts_to_rg_mjday'\n)\n\nGlobal radiation (rg) converted from watts to MegaJules per day\n\n\n25.92\n\n\n\nglobal_radiation_conversions_watts_mjules(\n    rg_mj=25.92, selected_conversion='rg_mj_to_rg_watts'\n)\n\nGlobal radiation (rg) converted from Mega Jules to Watts\n\n\n300.0\n\n\n\nglobal_radiation_conversions_watts_mjules(\n    rg_mj=np.array([1, 2]),\n    nhours=1,\n    selected_conversion='rg_mj_to_rg_watts_hour',\n)\n\nGlobal radiation (rg) converted from Mega Jules to Watts per hour\n\n\narray([277.77777778, 555.55555556])\n\n\n\nglobal_radiation_conversions_watts_mjules(\n    rg_mj=10, nhours=10, selected_conversion='rg_mj_to_rg_watts_hour'\n)\n\nGlobal radiation (rg) converted from Mega Jules to Watts per hour\n\n\n277.77777777777777\n\n\n\nsource\n\n\n\ndeclination\n\n declination (day_of_year:int, day_of_spring:int=80)\n\nCalculate declination of sun (radians ? ) for a given julian day (DOY)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nday_of_year\nint\n\njulian day (day of the year)\n\n\nday_of_spring\nint\n80\nJulian day representing the first day of spring\n\n\nReturns\nfloat\n\nEarth declination at day_of_year\n\n\n\n\nExample: Calculate declination\n\ndeclination(day_of_year=90, day_of_spring=80)\n\n/tmp/ipykernel_613/1608233118.py:48: UserWarning: date of spring set to 80. This might change for Australia\n  warnings.warn(\n\n\n0.06835636102670284\n\n\n\ndeclination(day_of_year=np.array([100, 200]), day_of_spring=80)\n\n/tmp/ipykernel_613/1608233118.py:48: UserWarning: date of spring set to 80. This might change for Australia\n  warnings.warn(\n\n\narray([0.1349969 , 0.35853539])\n\n\n\nsource\n\n\n\npotential_par\n\n potential_par (time_of_day_in_hours:float, latitude:float,\n                day_of_year:int)\n\nDetermine potential for a given place and date /used to determine cloud cover return potential par in W.m2\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntime_of_day_in_hours\nfloat\nArray containing the time of the day (in hours) for which potential par should be calculated\n\n\nlatitude\nfloat\nNumeric value specifying the geographic latitude (in decimal degrees) of the location of interest\n\n\nday_of_year\nint\nJulian day (day of the year)\n\n\nReturns\narray\nPotential Photosynthetic Active Radiation (PAR) for each time_of_day at given latitude and given day_of_year\n\n\n\n\nExample: Calculate the Potential PAR\n\npotential_par(time_of_day_in_hours=19, latitude=45.1, day_of_year=100)\n\n\npotential_par(\n    time_of_day_in_hours=np.arange(0, 24), latitude=45.1, day_of_year=100\n)",
    "crumbs": [
      "Conversions functions utils"
    ]
  },
  {
    "objectID": "plant_utils.html",
    "href": "plant_utils.html",
    "title": "Plant utils functions",
    "section": "",
    "text": "source\n\nrs_comp\n\n rs_comp (pi_ft:float, e_symp:float, psi:float)\n\nCompute Rs from pmin (resolution from Bartlet et al 2012 EcolLett and email Herve Cochard 19/06/2015)\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nturgor_comp\n\n turgor_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nTurgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_turgor_from_psi\n\n compute_turgor_from_psi (pi_ft:float, e_symp:float, psi:List)\n\nComputes Turgor pressure from Pressure-Volume curves parameters and water potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nList\nList of Water potential of the organ (MPa)\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute turgor\n\ncompute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[1, 2, 3])\n\narray([0., 0., 0.])\n\n\n\nError: Function only return zeros\n\nfor each_psi in range(1, 10):\n    print(compute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[each_psi]))\n\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n\n\n\nsource\n\n\n\n\nosmo_comp\n\n osmo_comp (pi_ft:float, r_stemp:float)\n\nCompute osmotic potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\npsi_total_symp_comp\n\n psi_total_symp_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nCompute Total potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nstomatal_regulation_turgor\n\n stomatal_regulation_turgor (turgor_pressure:float,\n                             max_turgor_pressure:float, e_max:float,\n                             e_cuti:float)\n\nThis function computes stomatal regulation if stomatal closure is limited (linearly) by turgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\nturgor_pressure\nfloat\nTurgor pressure\n\n\nmax_turgor_pressure\nfloat\nMaximum turgor pressure,\n\n\ne_max\nfloat\nUnknown parameter definition\n\n\ne_cuti\nfloat\nResidual Transpiration\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute Stomatal Regulation\n\nstomatal_regulation_turgor(\n    turgor_pressure=1, max_turgor_pressure=2, e_max=3, e_cuti=4\n)\n\narray([1.5, 3. ])\n\n\n\nsource\n\n\n\nplc_comp\n\n plc_comp (psi:float, slope:float, p50:float)\n\nCompute Percentage loss of conductivity\n\n\n\n\nType\nDetails\n\n\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nslope\nfloat\nUnknown parameter definition\n\n\np50\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nplc_prime_comp\n\n plc_prime_comp (plc:float, slope:float)\n\nThis function computes PLC Prime from PLC current value\n\n\n\n\nType\nDetails\n\n\n\n\nplc\nfloat\nComputed using the plc_comp function\n\n\nslope\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ngs_curve\n\n gs_curve (x:float, slope_gs:float, p50_gs:float, psi_start_closing:float,\n           psi_close:float, pi_ft:float, e_symp:float,\n           turgor_pressure_at_gs_max:float, gs_max:float,\n           transpiration_model:str=['jarvis', 'granier'],\n           stomatal_reg_formulation:str=['sigmoid', 'piecewise_linear',\n           'turgor'])\n\nTo obtain plots of the gs regulation curve\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nfloat\n\nUnknown parameter definition\n\n\nslope_gs\nfloat\n\nUnknown parameter definition\n\n\np50_gs\nfloat\n\nUnknown parameter definition\n\n\npsi_start_closing\nfloat\n\nUnknown parameter definition\n\n\npsi_close\nfloat\n\nUnknown parameter definition\n\n\npi_ft\nfloat\n\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\n\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nturgor_pressure_at_gs_max\nfloat\n\nUnknown parameter definition\n\n\ngs_max\nfloat\n\nUnknown parameter definition\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nstomatal_reg_formulation\nstr\n[‘sigmoid’, ‘piecewise_linear’, ‘turgor’]\nType of regulation to be used for stomatal response to leaf symplasmic water potential.\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_gmin\n\n compute_gmin (leaf_temp:float, gmin_20:float, t_phase:float, q10_1:float,\n               q10_2:float, gmin_temp_off=False)\n\nCalculate minimum conductance (gmin) following Cochard et al. (2019). Equantion 31 and 32 from SurEau-Ecos paper\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nleaf_temp\nfloat\n\nTemperature of the leaf (degC)\n\n\ngmin_20\nfloat\n\nleaf conductance at 20 degC\n\n\nt_phase\nfloat\n\nTemperature for phase transition of gmin\n\n\nq10_1\nfloat\n\nQ10 values for g_min= f(T) below T_phase\n\n\nq10_2\nfloat\n\nQ10 values for g_cuti = f(T) above T_phase\n\n\ngmin_temp_off\nbool\nFalse\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_emin\n\n compute_emin (gmin:float, vpd:float, g_bl:float, g_crown:float,\n               air_pressure:float=101.3)\n\nCalculate minimum transpiration (emin)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngmin\nfloat\n\nMinimum conductance\n\n\nvpd\nfloat\n\nVapor Pressure Deficit (kPa)\n\n\ng_bl\nfloat\n\nUnknown parameter definition\n\n\ng_crown\nfloat\n\nConductance of the tree crown. Calculated using compute_g_crown function\n\n\nair_pressure\nfloat\n101.3\nSurface air pressure (kPa)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_dfmc\n\n compute_dfmc (vpd:float, fm0=5.43, fm1=52.91, m=0.64)\n\nCompute dead fuel moisture content from VPD following De Dios et al. (2015)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvpd\nfloat\n\nVapor pressure deficit (kPA)\n\n\nfm0\nfloat\n5.43\nMinimum fuel moisture content (% dry weight)\n\n\nfm1\nfloat\n52.91\nMaximum fuel moisture content (% dry weight)\n\n\nm\nfloat\n0.64\nRate of decay\n\n\nReturns\nfloat\n\nFuel moisture content (% dry weight)\n\n\n\n\nsource\n\n\ndistribute_conductances\n\n distribute_conductances (k_plant_init:float, ri:float,\n                          frac_leaf_sym:float=0.4)\n\nCalcultate hydraulic conductances in the different portions of the plant (trunk, leaf and root) according to predetermined rules\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nk_plant_init\nfloat\n\nConductance of the plant from root to leaf\n\n\nri\nfloat\n\nRoot distribution within the soil layers.\n\n\nfrac_leaf_sym\nfloat\n0.4\nProportion of k_plant_init assigned to the leaf (apoplasm to symplasm pathway)\n\n\nReturns\nDict\n\n\n\n\n\n\nExample: Distribute conductances\n\ndistribute_conductances(k_plant_init=1, ri=2, frac_leaf_sym=0.4)\n\ndefaultdict(list,\n            {'k_slapo_init': 5.0,\n             'k_lsym_init': 2.5,\n             'k_rsapo_init': 5.0,\n             'k_plant_init': 1})\n\n\n\nsource\n\n\n\ncompute_g_crown\n\n compute_g_crown (g_crown0:float, wind_speed:float)\n\nCalcultate g_crown\n\n\n\n\nType\nDetails\n\n\n\n\ng_crown0\nfloat\nReference tree crown conductance\n\n\nwind_speed\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mmolm2s_to_mm\n\n convert_flux_from_mmolm2s_to_mm (x:float, time_step:float, lai:float)\n\nConvert an instantaneous flux in mmol.m-2Leaf.s-1 to a amount in mm (L.m2soil) over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mm_to_mmolm2s\n\n convert_flux_from_mm_to_mmolm2s (x:float, time_step:float, lai:float)\n\nConvert flux in L.m-2soil to an instantaneous flux in mmol/m-2leaf.s-1 over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncalculate_ebound_mm_granier\n\n calculate_ebound_mm_granier (etp:float, lai:float, a:float=-0.006,\n                              b:float=0.134, c:float=0)\n\nNo description found in R source code\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\netp\nfloat\n\nUnknown parameter definition\n\n\nlai\nfloat\n\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\na\nfloat\n-0.006\nUnknown parameter definition\n\n\nb\nfloat\n0.134\nUnknown parameter definition\n\n\nc\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncalculate_ebound_granier\n\n calculate_ebound_granier (pet:float, lai:float, time_step:float)\n\nNo description found in R source code\n\n\n\n\nType\nDetails\n\n\n\n\npet\nfloat\nUnknown parameter definition\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate ebound\n\ncalculate_ebound_granier(pet=1, lai=2, time_step=3)\n\n0.6275720164609054\n\n\n\nsource\n\n\n\ncompute_tleaf\n\n compute_tleaf (t_air:float, par:float, potential_par:float,\n                wind_speed:float, relative_humidity:int, gs:float,\n                g_cuti:float, e_inst:float, psi_leaf:float,\n                leaf_size:float=50, leaf_angle:int=45,\n                turn_off_eb:bool=False, transpiration_model:str=['jarvis',\n                'granier'])\n\nCompute leaf temperature and Vapour Pressure deficit\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nt_air\nfloat\n\nAir temperature (degC)\n\n\npar\nfloat\n\nUnknown parameter definition\n\n\npotential_par\nfloat\n\nUnknown parameter definition. Calculated using potential_par function?\n\n\nwind_speed\nfloat\n\nUnknown parameter definition (m/s)\n\n\nrelative_humidity\nint\n\nAir relative_humidity(%)\n\n\ngs\nfloat\n\nStomatal conductance\n\n\ng_cuti\nfloat\n\nleaf conductance\n\n\ne_inst\nfloat\n\nUnknown parameter definition\n\n\npsi_leaf\nfloat\n\nUnknown parameter definition\n\n\nleaf_size\nfloat\n50\nCharacteristic dimension from vegetation params in mm i.e. 1 (pine needle) to 3000 (banana leaf)\n\n\nleaf_angle\nint\n45\nLeaf angle (depuis le plan horizontal : 0-90 deg)\n\n\nturn_off_eb\nbool\nFalse\nUnknown parameter definition. Tleaf Energy balance?\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nReturns\nDict\n\nDictionary with parameters\n\n\n\n\nExample: Compute tleaf\n\ncompute_tleaf(\n    t_air=60,\n    par=100,\n    potential_par=1,\n    wind_speed=3,\n    relative_humidity=60,\n    gs=1,\n    g_cuti=2,\n    e_inst=3,\n    psi_leaf=-4,\n    leaf_size=50,\n    leaf_angle=45,\n    turn_off_eb=False,\n    transpiration_model='jarvis',\n)\n\ndefaultdict(list,\n            {'t_leaf': np.float64(60.394042704329365),\n             'g_bl': np.float64(3076.697970227172),\n             'vpd_leaf': np.float64(7.823071542236241),\n             'vpd_air': np.float64(7.978058190496631),\n             'delta_t': np.float64(0.39404270432936683)})\n\n\n\nsource\n\n\n\ncreate_empty_vegetation_parameter_file\n\n create_empty_vegetation_parameter_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the vegetation parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nRead vegetation file\n\nsource\n\n\n\nread_vegetation_file\n\n read_vegetation_file (file_path:pathlib._local.Path,\n                       modeling_options_file_path:pathlib._local.Path,\n                       sep:str=',')\n\nFunction for reading a data frame containing information about vegetation characteristics\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nmodeling_options_file_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\n\n\n\n\n\nExample: Read vegetation CSV file\n\nread_vegetation_file(\n    file_path='/tmp/pysureau_project_8osWFnip/1_parameter_files/vegetation_parameters.csv',\n    modeling_options_file_path='/tmp/pysureau_project_8osWFnip/1_parameter_files/modeling_options.csv',\n)\n\n\nsource\n\n\n\nk_series_sum\n\n k_series_sum (k1:float, k2:float)\n\nFunction to sum 2 conductances in series",
    "crumbs": [
      "Plant utils functions"
    ]
  },
  {
    "objectID": "soil_utils.html",
    "href": "soil_utils.html",
    "title": "Soil utils functions",
    "section": "",
    "text": "source\n\ncompute_b\n\n compute_b (lv:float)\n\nCalculate b used to compute the B of the Gardnar-Cowen model\n\n\n\n\nType\nDetails\n\n\n\n\nlv\nfloat\nlength of fine root per unit volume\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_b_gc\n\n compute_b_gc (la:float, b:float, root_radius:float)\n\nCalculate B Gardner cowen thhe scaling factor for soil conductance\n\n\n\n\nType\nDetails\n\n\n\n\nla\nfloat\nUnknown parameter definition\n\n\nb\nfloat\nUnknown parameter definition\n\n\nroot_radius\nfloat\nCalculated using the compute_b function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil\n\n compute_k_soil (rew:float, i_vg:float, n_vg:float, k_sat_vg:float,\n                 b_gc:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\ni_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nk_sat_vg\nfloat\nUnknown parameter definition\n\n\nb_gc\nfloat\nCalculated using the compute_b_gc function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil_camp\n\n compute_k_soil_camp (sws:float, tsc:float, b_camp:float,\n                      k_sat_campbell:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nk_sat_campbell\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil\n\n compute_p_soil (rew:float, alpha_vg:float, n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil_camp\n\n compute_p_soil_camp (sws:float, tsc:float, b_camp:float, psie:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_theta_at_given_p_soil\n\n compute_theta_at_given_p_soil (psi_target:float, theta_res:float,\n                                theta_sat:float, alpha_vg:float,\n                                n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\ntheta_res\nfloat\nUnknown parameter definition\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter\n\ncompute_theta_at_given_p_soil(\n    psi_target=2, theta_res=3, theta_sat=4, alpha_vg=5, n_vg=1.1\n)\n\n3.316227675107904\n\n\n\ncompute_theta_at_given_p_soil(\n    psi_target=np.array([1.5, 2]),\n    theta_res=np.array([3, -2]),\n    theta_sat=np.array([-6, -7]),\n    alpha_vg=np.array([9.02, 2.9]),\n    n_vg=np.array([-1.5, 0.001]),\n)\n\narray([-5.99999970e+000, -6.51316634e+303])\n\n\n\nsource\n\n\n\ncompute_theta_at_given_p_soil_camp\n\n compute_theta_at_given_p_soil_camp (theta_sat:float, psi_target:float,\n                                     psie:float, b_camp:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter for Campbell formulation\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=-1.5, theta_sat=0.39, psie=-0.025, b_camp=-4.0\n)\n\n0.14012860366560284\n\n\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=np.array([-1.5, -2]),\n    theta_sat=np.array([0.70]),\n    psie=np.array([-0.025, -4]),\n    b_camp=np.array([-4.0, -6]),\n)\n\narray([0.25151288, 0.78572343])\n\n\n\nsource\n\n\n\ncreate_empty_soil_parameter_files\n\n create_empty_soil_parameter_files (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the soil parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nsource\n\n\nread_soil_file\n\n read_soil_file (file_path:pathlib._local.Path, sep:str=',')\n\nFunction for reading a CSV file containing soil parameters information\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\nDictionary with soil parameters\n\n\n\n\nsource\n\n\nconvert_vwc_to_sws\n\n convert_vwc_to_sws (vwc_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil volumetric water content (m3.m-3) to water stock height (quantity as height in mm per m2 soil) by accounting for the respective layer thickness and rock fragment content. The volume of the water quantity per square metre results in the corresponding water stock height (m3 water per m2 soil as height in mm)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvwc_x\nfloat\n\nVolumetric Water Content m3.m-3\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nSoil Water Stock (mm)\n\n\n\n\nconvert_vwc_to_sws(1, layer_thickness=1)\n\n1000.0\n\n\n\nsource\n\n\nconvert_sws_to_vwc\n\n convert_sws_to_vwc (sws_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil water stock (quantity as height in mm per m2 soil) to volumetric water content (m3.m-3) by accounting for the respective layer thickness and rock fragment content\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsws_x\nfloat\n\nSoil Water Stock (mm)\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nVolumetric Water Content m3.m-3\n\n\n\n\nconvert_sws_to_vwc(1000, layer_thickness=1)\n\n1.0",
    "crumbs": [
      "Soil utils functions"
    ]
  },
  {
    "objectID": "parameter_validators.html",
    "href": "parameter_validators.html",
    "title": "Parameter validators",
    "section": "",
    "text": "Soil data validator\n\nsource\n\nSoilParameterValidatorCampbell\n\n SoilParameterValidatorCampbell (rfc_1:float, rfc_2:float, rfc_3:float,\n                                 soil_depth_1:float, soil_depth_2:float,\n                                 soil_depth_3:float, psie:float,\n                                 b_camp:float, g_soil_0:float,\n                                 offset_psoil:float, ksat_campbell:float,\n                                 psoil_at_field_capacity:float,\n                                 saturation_capacity_campbell:float,\n                                 pedo_transfer_formulation:str,\n                                 soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nSoilParameterValidatorVg\n\n SoilParameterValidatorVg (rfc_1:float, rfc_2:float, rfc_3:float,\n                           soil_depth_1:float, soil_depth_2:float,\n                           soil_depth_3:float, psie:float, n_vg:float,\n                           i_vg:float, ksat_vg:float, g_soil_0:float,\n                           alpha_vg:float, offset_psoil:float,\n                           residual_capacity_vg:float,\n                           saturation_capacity_vg:float,\n                           psoil_at_field_capacity:float,\n                           pedo_transfer_formulation:str,\n                           soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nModeling options validator\n\nsource\n\nModelingOptionsParameterValidator\n\n ModelingOptionsParameterValidator (eord:Literal[0,1], lcav:Literal[0,1],\n                                    scav:Literal[0,1], pet_formulation:Lit\n                                    eral['pt','penman'], rn_formulation:Li\n                                    teral['linacre','linear'], transpirati\n                                    on_model:Literal['jarvis','granier'], \n                                    time_step_for_evapo:Literal['variable'\n                                    ,1,2,4,6], resolution_output:Literal['\n                                    subdaily','daily','yearly'], numerical\n                                    _scheme:Literal['implicit','semi-\n                                    implicit','explicit'], output_type:Lit\n                                    eral['simple','diagnostic','LFMC','for\n                                    est_diback'], comp_options_for_evapo:L\n                                    iteral['normal','accurate','fast','cus\n                                    tom'], stomatal_reg_formulation:Litera\n                                    l['sigmoid','piecewise_linear','turgor\n                                    '], year_end:int, year_start:int,\n                                    custom_small_time_step_in_sec:int,\n                                    print_prog:bool, defoliation:bool,\n                                    constant_climate:bool,\n                                    output_overwrite:bool,\n                                    transpiration_granier_arg_a:float,\n                                    transpiration_granier_arg_b:float,\n                                    transpiration_granier_arg_c:float, lat\n                                    itude:Annotated[float,Ge(ge=-\n                                    91),Le(le=91)], longitude:Annotated[fl\n                                    oat,Ge(ge=-181),Le(le=181)], threshold\n                                    _mortality:Annotated[float,Ge(ge=0),Le\n                                    (le=100)])\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nVegetation parameters validator\n\nsource\n\nVegetationParameterValidator\n\n VegetationParameterValidator (apo_frac_leaf:Annotated[float,Ge(ge=0)],\n                               apo_frac_stem:Annotated[float,Ge(ge=0)], be\n                               ta_root_profile:Annotated[float,Ge(ge=0)], \n                               canopy_storage_param:Annotated[float,Ge(ge=\n                               0)], c_lapo_init:Annotated[float,Ge(ge=-\n                               1000),Lt(lt=1000)], c_sapo_init:Annotated[f\n                               loat,Ge(ge=-1000),Lt(lt=1000)], day_start:A\n                               nnotated[float,Ge(ge=1800),Lt(lt=3000)], da\n                               y_end:Annotated[float,Ge(ge=1800),Lt(lt=300\n                               0)],\n                               epsilon_sym_leaf:Annotated[float,Ge(ge=0)],\n                               epsilon_sym_stem:Annotated[float,Ge(ge=0)],\n                               f_crit:Annotated[float,Ge(ge=0)], foliage:L\n                               iteral['evergreen','deciduous','forced'], f\n                               _root_to_leaf:Annotated[float,Ge(ge=-\n                               1000),Lt(lt=1000)], f_trb_to_leaf:Annotated\n                               [float,Ge(ge=-1000),Lt(lt=1000)],\n                               g_crown0:Annotated[float,Ge(ge=0)],\n                               group:str,\n                               gmin_s:Annotated[float,Ge(ge=0)],\n                               gmin20:Annotated[float,Ge(ge=0)],\n                               gs_max:Annotated[float,Ge(ge=0)],\n                               gs_night:Annotated[float,Ge(ge=0)],\n                               jarvis_par:Annotated[float,Ge(ge=0)],\n                               k:Annotated[float,Ge(ge=0)],\n                               k_plant_init:Annotated[float,Ge(ge=0)],\n                               k_ssym_init:Annotated[float,Ge(ge=0)],\n                               leaf_angle:Annotated[float,Ge(ge=0)],\n                               leaf_size:Annotated[float,Ge(ge=0)],\n                               life_form:str,\n                               lmdc:Annotated[float,Ge(ge=0)],\n                               lma:Annotated[float,Ge(ge=0)],\n                               nb_day_lai:Annotated[float,Ge(ge=0)],\n                               p12_gs:Annotated[float,Ge(ge=0)],\n                               p50_vc_leaf:Annotated[float,Ge(ge=0)],\n                               p50_vc_stem:Annotated[float,Ge(ge=0)],\n                               p88_gs:Annotated[float,Ge(ge=0)], pi_full_t\n                               urgor_leaf:Annotated[float,Ge(ge=0)], pi_fu\n                               ll_turgor_stem:Annotated[float,Ge(ge=0)],\n                               psi_close:Annotated[float,Ge(ge=0)], psi_st\n                               art_closing:Annotated[float,Ge(ge=-\n                               1000),Lt(lt=1000)],\n                               pt_coeff:Annotated[float,Ge(ge=0)],\n                               q10_1_gmin:Annotated[float,Ge(ge=0)],\n                               q10_2_gmin:Annotated[float,Ge(ge=0)],\n                               root_radius:Annotated[float,Ge(ge=0)], slop\n                               e_vc_leaf:Annotated[float,Ge(ge=-\n                               1000),Lt(lt=1000)], slope_vc_stem:Annotated\n                               [float,Ge(ge=-1000),Lt(lt=1000)],\n                               species:str,\n                               sym_frac_stem:Annotated[float,Ge(ge=0)],\n                               sym_frac_leaf:Annotated[float,Ge(ge=0)],\n                               t_base:Annotated[float,Ge(ge=0)],\n                               t_gs_optim:Annotated[float,Ge(ge=0)],\n                               t_gs_sens:Annotated[float,Ge(ge=0)],\n                               t_phase_gmin:Annotated[float,Ge(ge=0)], tur\n                               gor_pressure_at_gs_max:Annotated[float,Ge(g\n                               e=-1000),Lt(lt=1000)],\n                               vol_stem:Annotated[float,Ge(ge=0)])\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nClimate data validator",
    "crumbs": [
      "Parameter validators"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pysureau",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "pysureau",
    "section": "Install",
    "text": "Install\nCode\npip install pysureau",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "pysureau",
    "section": "How to use",
    "text": "How to use\n\nRun pysureau_init(“path/to/folder”)",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "pysureau_init.html",
    "href": "pysureau_init.html",
    "title": "pysureau init",
    "section": "",
    "text": "source\n\npysureau_init\n\n pysureau_init (path:Optional[str]=None)\n\nFunction for creating the project’s main folder structure alongside with the necessary parameter files\n\npysureau_init(path='/tmp')\n\nCSV parameter file saved at /tmp/pysureau_project_fG7GxSSG/1_parameter_files/soil_parameters_vg.csv\nCSV parameter file saved at /tmp/pysureau_project_fG7GxSSG/1_parameter_files/soil_parameters_campbell.csv\nCSV parameter file saved at /tmp/pysureau_project_fG7GxSSG/1_parameter_files/modeling_options.csv\nCSV parameter file saved at /tmp/pysureau_project_fG7GxSSG/1_parameter_files/vegetation_parameters.csv\npysureau project created at /tmp/pysureau_project_fG7GxSSG",
    "crumbs": [
      "pysureau init"
    ]
  },
  {
    "objectID": "climate_utils.html",
    "href": "climate_utils.html",
    "title": "Climate utils functions",
    "section": "",
    "text": "source\n\nday_length\n\n day_length (latitude:float, day_of_year:int, no_times_as_na:bool=False)\n\nOriginal function from chillR R package. This function computes sunrise time, sunset time and daylength for a particular location and day of the year (Julian day). This is done using equations by Spencer (1971) and Almorox et al. (2005).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlatitude\nfloat\n\nnumeric value specifying the geographic latitude (in decimal degrees) of the location of interest\n\n\nday_of_year\nint\n\nnumeric (usually integer) value or vector specifying the Julian day (day of the year), for which calculations should be done.\n\n\nno_times_as_na\nbool\nFalse\nparameter to determine whether for days without sunrise or sunset, na should be returned for Sunset and Sunrise. If left at FALSE, the function returns -99 and 99 for sunrise and sunset or polar nights and polar days, respectively\n\n\nReturns\nDict\n\nDictionary with three elements Sunrise, Sunset and Daylength. For days without sunrise (polar nights),sunset and sunrise become -99 and the daylength 0. For days without sunset, sunset and sunrise are 99 and daylength 24.\n\n\n\n\nExample: Calculate day length\nThis function was originally developed in the ChillR R package\n\nday_length(latitude=45, day_of_year=100, no_times_as_na=False)\n\n/tmp/ipykernel_27135/2141787043.py:9: UserWarning: Double check day_length function works for Australia\n  warnings.warn('Double check day_length function works for Australia')\n\n\ndefaultdict(list,\n            {'sunrise': array([5.4049135]),\n             'sunset': array([18.5950865]),\n             'day_length': array([13.190173])})\n\n\n\nday_length(\n    latitude=50,\n    day_of_year=np.array([78, 79, 80, 81, 82]),\n    no_times_as_na=False,\n)\n\n/tmp/ipykernel_27135/2141787043.py:9: UserWarning: Double check day_length function works for Australia\n  warnings.warn('Double check day_length function works for Australia')\n\n\ndefaultdict(list,\n            {'sunrise': array([5.98160544, 5.95020317, 5.91880891, 5.88742546, 5.85605558]),\n             'sunset': array([18.01839456, 18.04979683, 18.08119109, 18.11257454, 18.14394442]),\n             'day_length': array([12.03678911, 12.09959365, 12.16238217, 12.22514908, 12.28788884])})",
    "crumbs": [
      "Climate utils functions"
    ]
  },
  {
    "objectID": "pysureau_utils.html",
    "href": "pysureau_utils.html",
    "title": "pysureau utils functions",
    "section": "",
    "text": "source\n\ndict_to_csv\n\n dict_to_csv (dictionary:Dict, filename:str, path:pathlib._local.Path)\n\nFunction for converting a dictionary that contains parameters into a CSV file\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\nDict\nDictionary\n\n\nfilename\nstr\nFilename\n\n\npath\nPath\nPath where the csv file will be stored\n\n\nReturns\nDataFrame",
    "crumbs": [
      "pysureau utils functions"
    ]
  }
]