[
  {
    "objectID": "pysureau_utils.html",
    "href": "pysureau_utils.html",
    "title": "pysureau utils functions",
    "section": "",
    "text": "source\n\ndict_to_csv\n\n dict_to_csv (dictionary:Dict, filename:str, path:pathlib._local.Path)\n\nFunction for converting a dictionary that contains parameters into a CSV file\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\nDict\nDictionary\n\n\nfilename\nstr\nFilename\n\n\npath\nPath\nPath where the csv file will be stored\n\n\nReturns\nDataFrame",
    "crumbs": [
      "pysureau utils functions"
    ]
  },
  {
    "objectID": "plant_utils.html",
    "href": "plant_utils.html",
    "title": "Plant utils functions",
    "section": "",
    "text": "source\n\nrs_comp\n\n rs_comp (pi_ft:float, e_symp:float, psi:float)\n\nCompute Rs from pmin (resolution from Bartlet et al 2012 EcolLett and email Herve Cochard 19/06/2015)\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nturgor_comp\n\n turgor_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nTurgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_turgor_from_psi\n\n compute_turgor_from_psi (pi_ft:float, e_symp:float, psi:List)\n\nComputes Turgor pressure from Pressure-Volume curves parameters and water potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nList\nList of Water potential of the organ (MPa)\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute turgor\n\ncompute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[1, 2, 3])\n\narray([0., 0., 0.])\n\n\n\nError: Function only return zeros\n\nfor each_psi in range(1, 10):\n    print(compute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[each_psi]))\n\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n\n\n\nsource\n\n\n\n\nosmo_comp\n\n osmo_comp (pi_ft:float, r_stemp:float)\n\nCompute osmotic potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\npsi_total_symp_comp\n\n psi_total_symp_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nCompute Total potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nstomatal_regulation_turgor\n\n stomatal_regulation_turgor (turgor_pressure:float,\n                             max_turgor_pressure:float, e_max:float,\n                             e_cuti:float)\n\nThis function computes stomatal regulation if stomatal closure is limited (linearly) by turgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\nturgor_pressure\nfloat\nTurgor pressure\n\n\nmax_turgor_pressure\nfloat\nMaximum turgor pressure,\n\n\ne_max\nfloat\nUnknown parameter definition\n\n\ne_cuti\nfloat\nResidual Transpiration\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute Stomatal Regulation\n\nstomatal_regulation_turgor(\n    turgor_pressure=1, max_turgor_pressure=2, e_max=3, e_cuti=4\n)\n\narray([1.5, 3. ])\n\n\n\nsource\n\n\n\nplc_comp\n\n plc_comp (psi:float, slope:float, p50:float)\n\nCompute Percentage loss of conductivity\n\n\n\n\nType\nDetails\n\n\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nslope\nfloat\nUnknown parameter definition\n\n\np50\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nplc_prime_comp\n\n plc_prime_comp (plc:float, slope:float)\n\nThis function computes PLC Prime from PLC current value\n\n\n\n\nType\nDetails\n\n\n\n\nplc\nfloat\nComputed using the plc_comp function\n\n\nslope\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ngs_curve\n\n gs_curve (x:float, slope_gs:float, p50_gs:float, psi_start_closing:float,\n           psi_close:float, pi_ft:float, e_symp:float,\n           turgor_pressure_at_gs_max:float, gs_max:float,\n           transpiration_model:str=['jarvis', 'granier'],\n           stomatal_reg_formulation:str=['sigmoid', 'piecewise_linear',\n           'turgor'])\n\nTo obtain plots of the gs regulation curve\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nfloat\n\nUnknown parameter definition\n\n\nslope_gs\nfloat\n\nUnknown parameter definition\n\n\np50_gs\nfloat\n\nUnknown parameter definition\n\n\npsi_start_closing\nfloat\n\nUnknown parameter definition\n\n\npsi_close\nfloat\n\nUnknown parameter definition\n\n\npi_ft\nfloat\n\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\n\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nturgor_pressure_at_gs_max\nfloat\n\nUnknown parameter definition\n\n\ngs_max\nfloat\n\nUnknown parameter definition\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nstomatal_reg_formulation\nstr\n[‘sigmoid’, ‘piecewise_linear’, ‘turgor’]\nType of regulation to be used for stomatal response to leaf symplasmic water potential.\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_gmin\n\n compute_gmin (leaf_temp:float, gmin_20:float, t_phase:float, q10_1:float,\n               q10_2:float, gmin_temp_off=False)\n\nCalculate minimum conductance (gmin) following Cochard et al. (2019). Equantion 31 and 32 from SurEau-Ecos paper\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nleaf_temp\nfloat\n\nTemperature of the leaf (degC)\n\n\ngmin_20\nfloat\n\nleaf conductance at 20 degC\n\n\nt_phase\nfloat\n\nTemperature for phase transition of gmin\n\n\nq10_1\nfloat\n\nQ10 values for g_min= f(T) below T_phase\n\n\nq10_2\nfloat\n\nQ10 values for g_cuti = f(T) above T_phase\n\n\ngmin_temp_off\nbool\nFalse\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_emin\n\n compute_emin (gmin:float, vpd:float, g_bl:float, g_crown:float,\n               air_pressure:float=101.3)\n\nCalculate minimum transpiration (emin)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngmin\nfloat\n\nMinimum conductance\n\n\nvpd\nfloat\n\nVapor Pressure Deficit (kPa)\n\n\ng_bl\nfloat\n\nUnknown parameter definition\n\n\ng_crown\nfloat\n\nConductance of the tree crown. Calculated using compute_g_crown function\n\n\nair_pressure\nfloat\n101.3\nSurface air pressure (kPa)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_dfmc\n\n compute_dfmc (vpd:float, fm0=5.43, fm1=52.91, m=0.64)\n\nCompute dead fuel moisture content from VPD following De Dios et al. (2015)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvpd\nfloat\n\nVapor pressure deficit (kPA)\n\n\nfm0\nfloat\n5.43\nMinimum fuel moisture content (% dry weight)\n\n\nfm1\nfloat\n52.91\nMaximum fuel moisture content (% dry weight)\n\n\nm\nfloat\n0.64\nRate of decay\n\n\nReturns\nfloat\n\nFuel moisture content (% dry weight)\n\n\n\n\nsource\n\n\ndistribute_conductances\n\n distribute_conductances (k_plant_init:float, ri:float,\n                          frac_leaf_sym:float=0.4)\n\nCalcultate hydraulic conductances in the different portions of the plant (trunk, leaf and root) according to predetermined rules\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nk_plant_init\nfloat\n\nConductance of the plant from root to leaf\n\n\nri\nfloat\n\nRoot distribution within the soil layers.\n\n\nfrac_leaf_sym\nfloat\n0.4\nProportion of k_plant_init assigned to the leaf (apoplasm to symplasm pathway)\n\n\nReturns\nDict\n\n\n\n\n\n\nExample: Distribute conductances\n\ndistribute_conductances(k_plant_init=1, ri=2, frac_leaf_sym=0.4)\n\ndefaultdict(list,\n            {'k_slapo_init': 5.0,\n             'k_lsym_init': 2.5,\n             'k_rsapo_init': 5.0,\n             'k_plant_init': 1})\n\n\n\nsource\n\n\n\ncompute_g_crown\n\n compute_g_crown (g_crown0:float, wind_speed:float)\n\nCalcultate g_crown\n\n\n\n\nType\nDetails\n\n\n\n\ng_crown0\nfloat\nReference tree crown conductance\n\n\nwind_speed\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mmolm2s_to_mm\n\n convert_flux_from_mmolm2s_to_mm (x:float, time_step:float, lai:float)\n\nConvert an instantaneous flux in mmol.m-2Leaf.s-1 to a amount in mm (L.m2soil) over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mm_to_mmolm2s\n\n convert_flux_from_mm_to_mmolm2s (x:float, time_step:float, lai:float)\n\nConvert flux in L.m-2soil to an instantaneous flux in mmol/m-2leaf.s-1 over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncalculate_ebound_mm_granier\n\n calculate_ebound_mm_granier (etp:float, lai:float, a:float=-0.006,\n                              b:float=0.134, c:float=0)\n\nNo description found in R source code\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\netp\nfloat\n\nUnknown parameter definition\n\n\nlai\nfloat\n\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\na\nfloat\n-0.006\nUnknown parameter definition\n\n\nb\nfloat\n0.134\nUnknown parameter definition\n\n\nc\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncalculate_ebound_granier\n\n calculate_ebound_granier (pet:float, lai:float, time_step:float)\n\nNo description found in R source code\n\n\n\n\nType\nDetails\n\n\n\n\npet\nfloat\nUnknown parameter definition\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate ebound\n\ncalculate_ebound_granier(pet=1, lai=2, time_step=3)\n\n0.6275720164609054\n\n\n\nsource\n\n\n\ncompute_tleaf\n\n compute_tleaf (t_air:float, par:float, potential_par:float,\n                wind_speed:float, relative_humidity:int, gs:float,\n                g_cuti:float, e_inst:float, psi_leaf:float,\n                leaf_size:float=50, leaf_angle:int=45,\n                turn_off_eb:bool=False, transpiration_model:str=['jarvis',\n                'granier'])\n\nCompute leaf temperature and Vapour Pressure deficit\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nt_air\nfloat\n\nAir temperature (degC)\n\n\npar\nfloat\n\nUnknown parameter definition\n\n\npotential_par\nfloat\n\nUnknown parameter definition. Calculated using potential_par function?\n\n\nwind_speed\nfloat\n\nUnknown parameter definition (m/s)\n\n\nrelative_humidity\nint\n\nAir relative_humidity(%)\n\n\ngs\nfloat\n\nStomatal conductance\n\n\ng_cuti\nfloat\n\nleaf conductance\n\n\ne_inst\nfloat\n\nUnknown parameter definition\n\n\npsi_leaf\nfloat\n\nUnknown parameter definition\n\n\nleaf_size\nfloat\n50\nCharacteristic dimension from vegetation params in mm i.e. 1 (pine needle) to 3000 (banana leaf)\n\n\nleaf_angle\nint\n45\nLeaf angle (depuis le plan horizontal : 0-90 deg)\n\n\nturn_off_eb\nbool\nFalse\nUnknown parameter definition. Tleaf Energy balance?\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nReturns\nDict\n\nDictionary with parameters\n\n\n\n\nExample: Compute tleaf\n\ncompute_tleaf(\n    t_air=60,\n    par=100,\n    potential_par=1,\n    wind_speed=3,\n    relative_humidity=60,\n    gs=1,\n    g_cuti=2,\n    e_inst=3,\n    psi_leaf=-4,\n    leaf_size=50,\n    leaf_angle=45,\n    turn_off_eb=False,\n    transpiration_model='jarvis',\n)\n\ndefaultdict(list,\n            {'t_leaf': 60.394042704329365,\n             'g_bl': 3076.697970227172,\n             'vpd_leaf': 7.823071542236241,\n             'vpd_air': 7.978058190496631,\n             'delta_t': 0.39404270432936683})\n\n\n\nsource\n\n\n\ncreate_empty_vegetation_parameter_file\n\n create_empty_vegetation_parameter_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the vegetation parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nRead vegetation file\n\nsource\n\n\n\nread_vegetation_file\n\n read_vegetation_file (file_path:pathlib._local.Path,\n                       modeling_options:Dict, sep:str=';')\n\nFunction for reading a data frame containing information about vegetation characteristics\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to a csv file containing parameter values i.e path/to/file_name.csv\n\n\nmodeling_options\nDict\n\nDictionary created using the create_modeling_options function\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\n\n\n\n\nList of traits required:\n\n\n\nterm_in_code\n\n\nterm_in_paper\n\n\nDefinition\n\n\nUnits\n\n\n\n\nP50_VC_Leaf\n\n\nψ50,L\n\n\nWater potential causing 50% Cavitation in the vulnerability curve\n\n\nMPa\n\n\n\n\nslope_VC_Leaf\n\n\nslopeL\n\n\nSlope of rate of leaf embolism spread at ψ50,L\n\n\n%/MPa\n\n\n\n\nepsilonSym_Leaf\n\n\nεL\n\n\nModulus of elasticity of the leaf symplasm\n\n\nMPa\n\n\n\n\nPiFullTurgor_Leaf\n\n\nπ0L\n\n\nOsmotic potential at full turgor of the leaf symplasm\n\n\nMPa\n\n\n\n\napoFrac_Leaf\n\n\nαLApo\n\n\nApoplasmic Fraction in leaves/Leaf apoplasmic fraction\n\n\nUnitless\n\n\n\n\nLDMC\n\n\nLDMC\n\n\nLeaf dry matter content (dry mass over saturated mass)\n\n\nmgMS/g??\n\n\n\n\nLMA\n\n\nLMA\n\n\nLeaf mass per area\n\n\ng/m2leaf\n\n\n\n\nK\n\n\nk\n\n\nLight extinction coefficient of the vegetation layer\n\n\nunitless\n\n\n\n\nk_PlantInit\n\n\nnot found\n\n\nHydaulic conductance of the plant from soil to leaves\n\n\nmmol/MPa/s/m2leaf?\n\n\n\n\ngmin20\n\n\ngcuti20\n\n\nMinimum conductance (gmin) at the reference temperature.\n\n\nmmol/m2leaf/s-1\n\n\n\n\nTPhase_gmin\n\n\nTPhase\n\n\nTemperature for phase transition of minimum conductance/Temperature for transition phase of gcuti\n\n\ndegC\n\n\n\n\nQ10_1_gmin\n\n\nQ10a\n\n\nQ10 value for gmin = f(T) &lt;= Tphase_gmin/ Temperature dependance of gcuti when T ≤ TPhase\n\n\nunitless\n\n\n\n\nQ10_2_gmin\n\n\nQ10b\n\n\nQ10 value for gmin = f(T) &gt; Tphase_gmin/ Temperature dependance of gcuti when T &gt; TPhase\n\n\nunitless\n\n\n\n\ngmin_S\n\n\nnot found\n\n\nconductance (gmin) of the stem\n\n\nUnitless??\n\n\n\n\ncanopyStorageParam\n\n\ncws\n\n\nDepth of water that can be retained by leaves and trunks per unit of leaf area index (used to compute the canopy water storage capacity as a function of LAI\n\n\nl/m2leaf\n\n\n\n\nrootRadius\n\n\ndR\n\n\nradius of roots\n\n\nmeters\n\n\n\n\nfRootToLeaf\n\n\nRaLa\n\n\nRoot-to-leaf area ratio\n\n\nunitless\n\n\n\n\nbetaRootProfile\n\n\nβ\n\n\nparameter for the distribution of roots in the soil\n\n\nunitless\n\n\n\n\nPiFullTurgor_Stem\n\n\nπ0S\n\n\nOsmotic potential at full turgor of the stem symplasm\n\n\nMPa\n\n\n\n\nepsilonSym_Stem\n\n\nεS\n\n\nModulus of elasticity of the stem symplasm\n\n\nMPa\n\n\n\n\napoFrac_Stem\n\n\nαSApo\n\n\nStem apoplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nsymFrac_Stem\n\n\nαSSym\n\n\nStem symplasmic fraction of the wood water volume\n\n\nUnitless\n\n\n\n\nvol_Stem\n\n\nVS\n\n\nVolume of tissue of the stem (includes the root, trunk and branches)\n\n\nL m−2 soil\n\n\n\n\nfTRBToLeaf\n\n\nnot found\n\n\nDefinition not found\n\n\n\n\n\n\nC_LApoInit\n\n\nCLApo\n\n\nCapacitance of the leaf apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nC_SApoInit\n\n\nCSApo\n\n\nCapacitance of the stem apoplasm\n\n\nmmol m−2 leaf MPa−1\n\n\n\n\nP50_VC_Stem\n\n\nψ50,S\n\n\nWater potential causing 50 % loss of stem hydraulic conductance\n\n\nMPa\n\n\n\n\nslope_VC_Stem\n\n\nslopeS\n\n\nSlope of rate of stem embolism spread at ψ50,S\n\n\n% MPa−1\n\n\n\n\nk_SSymInit\n\n\nnot found\n\n\nDefinition not found\n\n\nnot found\n\n\n\n\nfoliage\n\n\nnot found\n\n\nDefinition not found\n\n\nNot applicable\n\n\n\n\nnot found\n\n\nt0\n\n\nInitial date of the forcing period for leaf phenology\n\n\nDOY\n\n\n\n\nnot found\n\n\nTD\n\n\nMinimum temperature to start cumulating temperature for budburst\n\n\n◦C\n\n\n\n\nnot found\n\n\nF∗\n\n\nAmount of forcing temperature to reach budburst\n\n\n◦C\n\n\n\n\nRAI\n\n\nRLAI\n\n\nLAI growth rate per day\n\n\nLAI d−1\n\n\n\n\nk_RSApoInit\n\n\nKR-SApo,max\n\n\nMaximum conductance from the root surface to the stem apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_SLApoInit\n\n\nKSApo−LApo,max\n\n\nMaximum conductance from trunk apoplasm to the leaf apoplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nKSSym\n\n\nConductance from the stem apoplasm to stem symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nk_LSymInit\n\n\nKLSym\n\n\nConductance from the leaf apoplasm to leaf symplasm\n\n\nmmol m−2 leaf s −1 MPa−1\n\n\n\n\nnot found\n\n\nSucculence\n\n\nLeaf succulence (water content per unit of leaf area)\n\n\ng m−2 leaf\n\n\n\n\nP50_gs\n\n\nψgs50\n\n\nWater potential causing 50 % stomatal closure\n\n\nMPa\n\n\n\n\nnot found\n\n\nslopegs\n\n\nRate of decrease in stomatal conductance at ψgs,50\n\n\n% MPa−1\n\n\n\n\nnot found\n\n\ngstom_min\n\n\nMinimum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\ngstom_max\n\n\nMaximum stomatal conductance\n\n\nmmol m−2 leaf s −1\n\n\n\n\nnot found\n\n\nδ\n\n\nResponse of gstom to light\n\n\nunitless\n\n\n\n\nnot found\n\n\nToptim\n\n\nTemperature at maximal stomatal conductance\n\n\n◦C\n\n\n\n\nnot found\n\n\nTsens\n\n\nStomatal sensitivity to temperature\n\n\n◦C\n\n\n\n\nnot found\n\n\nθs\n\n\nSoil water content at saturation\n\n\nunitless\n\n\n\n\nnot found\n\n\nθr\n\n\nResidual soil water content\n\n\nunitless\n\n\n\n\nnot found\n\n\nα\n\n\nInverse of the air entry potential\n\n\n1/MPa\n\n\n\n\nnot found\n\n\nn\n\n\nPore size distribution index\n\n\nunitless\n\n\n\n\nnot found\n\n\nI\n\n\nShape parameter for the Van Genuchten equation\n\n\nunitless\n\n\n\n\nnot found\n\n\nksat\n\n\nSoil hydraulic conductivity at saturation\n\n\nmmol m−1 soil s −1 MPa−1\n\n\n\n\nnot found\n\n\ngsoil0\n\n\nReference soil conductance to water vapor\n\n\nmmol m−2 soil s −1\n\n\n\n\nExample: Read vegetation CSV file\nmodeling_options_dict = create_modeling_options( time_step_for_evapo=2, reset_swc=True, avoid_water_soil_transfer=True, constant_climate=False, defoliation=True, soil_evapo=True, threshold_mortality=51, etp_formulation=‘pt’, rn_formulation=‘linear’, comp_options_for_evapo=‘custom’, stomatal_reg_formulation=‘turgor’, transpiration_model=‘jarvis’, numerical_scheme=‘implicit’, pedo_transfer_formulation=‘vg’, )\nread_vegetation_file( file_path=‘./sample_data/vegetation_example_wide.csv’, modeling_options=modeling_options_dict, sep=‘,’, )\n\nsource\n\n\n\nk_series_sum\n\n k_series_sum (k1:float, k2:float)\n\nFunction to sum 2 conductances in series",
    "crumbs": [
      "Plant utils functions"
    ]
  },
  {
    "objectID": "soil_utils.html",
    "href": "soil_utils.html",
    "title": "Soil utils functions",
    "section": "",
    "text": "source\n\ncompute_b\n\n compute_b (lv:float)\n\nCalculate b used to compute the B of the Gardnar-Cowen model\n\n\n\n\nType\nDetails\n\n\n\n\nlv\nfloat\nlength of fine root per unit volume\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_b_gc\n\n compute_b_gc (la:float, b:float, root_radius:float)\n\nCalculate B Gardner cowen thhe scaling factor for soil conductance\n\n\n\n\nType\nDetails\n\n\n\n\nla\nfloat\nUnknown parameter definition\n\n\nb\nfloat\nUnknown parameter definition\n\n\nroot_radius\nfloat\nCalculated using the compute_b function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil\n\n compute_k_soil (rew:float, i_vg:float, n_vg:float, k_sat_vg:float,\n                 b_gc:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\ni_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nk_sat_vg\nfloat\nUnknown parameter definition\n\n\nb_gc\nfloat\nCalculated using the compute_b_gc function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil_camp\n\n compute_k_soil_camp (sws:float, tsc:float, b_camp:float,\n                      k_sat_campbell:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nk_sat_campbell\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil\n\n compute_p_soil (rew:float, alpha_vg:float, n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil_camp\n\n compute_p_soil_camp (sws:float, tsc:float, b_camp:float, psie:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_theta_at_given_p_soil\n\n compute_theta_at_given_p_soil (psi_target:float, theta_res:float,\n                                theta_sat:float, alpha_vg:float,\n                                n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\ntheta_res\nfloat\nUnknown parameter definition\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter\n\ncompute_theta_at_given_p_soil(\n    psi_target=2, theta_res=3, theta_sat=4, alpha_vg=5, n_vg=1.1\n)\n\n3.316227675107904\n\n\n\ncompute_theta_at_given_p_soil(\n    psi_target=np.array([1.5, 2]),\n    theta_res=np.array([3, -2]),\n    theta_sat=np.array([-6, -7]),\n    alpha_vg=np.array([9.02, 2.9]),\n    n_vg=np.array([-1.5, 0.001]),\n)\n\narray([-5.99999970e+000, -6.51316634e+303])\n\n\n\nsource\n\n\n\ncompute_theta_at_given_p_soil_camp\n\n compute_theta_at_given_p_soil_camp (theta_sat:float, psi_target:float,\n                                     psie:float, b_camp:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter for Campbell formulation\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=-1.5, theta_sat=0.39, psie=-0.025, b_camp=-4.0\n)\n\n0.14012860366560284\n\n\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=np.array([-1.5, -2]),\n    theta_sat=np.array([0.70]),\n    psie=np.array([-0.025, -4]),\n    b_camp=np.array([-4.0, -6]),\n)\n\narray([0.25151288, 0.78572343])\n\n\n\nsource\n\n\n\ncreate_empty_soil_parameter_files\n\n create_empty_soil_parameter_files (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the soil parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nsource\n\n\nread_soil_file\n\n read_soil_file (file_path:pathlib._local.Path, sep:str=',')\n\nFunction for reading a CSV file containing soil parameters information\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\nDictionary with soil parameters\n\n\n\n\nsource\n\n\nconvert_vwc_to_sws\n\n convert_vwc_to_sws (vwc_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil volumetric water content (m3.m-3) to water stock height (quantity as height in mm per m2 soil) by accounting for the respective layer thickness and rock fragment content. The volume of the water quantity per square metre results in the corresponding water stock height (m3 water per m2 soil as height in mm)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvwc_x\nfloat\n\nVolumetric Water Content m3.m-3\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nSoil Water Stock (mm)\n\n\n\n\nconvert_vwc_to_sws(1, layer_thickness=1)\n\n1000.0\n\n\n\nsource\n\n\nconvert_sws_to_vwc\n\n convert_sws_to_vwc (sws_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil water stock (quantity as height in mm per m2 soil) to volumetric water content (m3.m-3) by accounting for the respective layer thickness and rock fragment content\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsws_x\nfloat\n\nSoil Water Stock (mm)\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nVolumetric Water Content m3.m-3\n\n\n\n\nconvert_sws_to_vwc(1000, layer_thickness=1)\n\n1.0",
    "crumbs": [
      "Soil utils functions"
    ]
  },
  {
    "objectID": "parameter_validators.html",
    "href": "parameter_validators.html",
    "title": "Parameter validators",
    "section": "",
    "text": "Soil data validator\n\nsource\n\nSoilParameterValidatorCampbell\n\n SoilParameterValidatorCampbell (rfc_1:float, rfc_2:float, rfc_3:float,\n                                 soil_depth_1:float, soil_depth_2:float,\n                                 soil_depth_3:float, psie:float,\n                                 b_camp:float, g_soil_0:float,\n                                 offset_psoil:float, ksat_campbell:float,\n                                 psoil_at_field_capacity:float,\n                                 saturation_capacity_campbell:float,\n                                 pedo_transfer_formulation:str,\n                                 soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nSoilParameterValidatorVg\n\n SoilParameterValidatorVg (rfc_1:float, rfc_2:float, rfc_3:float,\n                           soil_depth_1:float, soil_depth_2:float,\n                           soil_depth_3:float, psie:float, n_vg:float,\n                           i_vg:float, ksat_vg:float, g_soil_0:float,\n                           alpha_vg:float, offset_psoil:float,\n                           residual_capacity_vg:float,\n                           saturation_capacity_vg:float,\n                           psoil_at_field_capacity:float,\n                           pedo_transfer_formulation:str,\n                           soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nClimate data validator\n\n\nPlant data Validator",
    "crumbs": [
      "Parameter validators"
    ]
  },
  {
    "objectID": "pysureau_init.html",
    "href": "pysureau_init.html",
    "title": "pysureau init",
    "section": "",
    "text": "source\n\npysureau_init\n\n pysureau_init (path:Optional[str]=None)\n\nFunction for creating the project’s main folder structure alongside with the necessary parameter files\n\npysureau_init(path='/tmp')\n\nCSV file saved as /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_vg.csv\nCSV file saved as /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_campbell.csv\npysureau project created at /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW",
    "crumbs": [
      "pysureau init"
    ]
  }
]