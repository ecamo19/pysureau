[
  {
    "objectID": "pysureau_utils.html",
    "href": "pysureau_utils.html",
    "title": "pysureau utils functions",
    "section": "",
    "text": "source\n\ndict_to_csv\n\n dict_to_csv (dictionary:Dict, filename:str, path:pathlib._local.Path)\n\nFunction for converting a dictionary that contains parameters into a CSV file\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\nDict\nDictionary\n\n\nfilename\nstr\nFilename\n\n\npath\nPath\nPath where the csv file will be stored\n\n\nReturns\nDataFrame",
    "crumbs": [
      "pysureau utils functions"
    ]
  },
  {
    "objectID": "soil_utils.html",
    "href": "soil_utils.html",
    "title": "Soil utils functions",
    "section": "",
    "text": "source\n\ncompute_b\n\n compute_b (lv:float)\n\nCalculate b used to compute the B of the Gardnar-Cowen model\n\n\n\n\nType\nDetails\n\n\n\n\nlv\nfloat\nlength of fine root per unit volume\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_b_gc\n\n compute_b_gc (la:float, b:float, root_radius:float)\n\nCalculate B Gardner cowen thhe scaling factor for soil conductance\n\n\n\n\nType\nDetails\n\n\n\n\nla\nfloat\nUnknown parameter definition\n\n\nb\nfloat\nUnknown parameter definition\n\n\nroot_radius\nfloat\nCalculated using the compute_b function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil\n\n compute_k_soil (rew:float, i_vg:float, n_vg:float, k_sat_vg:float,\n                 b_gc:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\ni_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nk_sat_vg\nfloat\nUnknown parameter definition\n\n\nb_gc\nfloat\nCalculated using the compute_b_gc function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil_camp\n\n compute_k_soil_camp (sws:float, tsc:float, b_camp:float,\n                      k_sat_campbell:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nk_sat_campbell\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil\n\n compute_p_soil (rew:float, alpha_vg:float, n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil_camp\n\n compute_p_soil_camp (sws:float, tsc:float, b_camp:float, psie:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_theta_at_given_p_soil\n\n compute_theta_at_given_p_soil (psi_target:float, theta_res:float,\n                                theta_sat:float, alpha_vg:float,\n                                n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\ntheta_res\nfloat\nUnknown parameter definition\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter\n\ncompute_theta_at_given_p_soil(\n    psi_target=2, theta_res=3, theta_sat=4, alpha_vg=5, n_vg=1.1\n)\n\n3.316227675107904\n\n\n\ncompute_theta_at_given_p_soil(\n    psi_target=np.array([1.5, 2]),\n    theta_res=np.array([3, -2]),\n    theta_sat=np.array([-6, -7]),\n    alpha_vg=np.array([9.02, 2.9]),\n    n_vg=np.array([-1.5, 0.001]),\n)\n\narray([-5.99999970e+000, -6.51316634e+303])\n\n\n\nsource\n\n\n\ncompute_theta_at_given_p_soil_camp\n\n compute_theta_at_given_p_soil_camp (theta_sat:float, psi_target:float,\n                                     psie:float, b_camp:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter for Campbell formulation\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=-1.5, theta_sat=0.39, psie=-0.025, b_camp=-4.0\n)\n\n0.14012860366560284\n\n\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=np.array([-1.5, -2]),\n    theta_sat=np.array([0.70]),\n    psie=np.array([-0.025, -4]),\n    b_camp=np.array([-4.0, -6]),\n)\n\narray([0.25151288, 0.78572343])\n\n\n\nsource\n\n\n\ncreate_empty_soil_parameter_files\n\n create_empty_soil_parameter_files (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the soil parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nsource\n\n\nread_soil_file\n\n read_soil_file (file_path:pathlib._local.Path, sep:str=',')\n\nFunction for reading a CSV file containing soil parameters information\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\nDictionary with soil parameters\n\n\n\n\n#soil_data = pd.read_csv('/tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_campbell.csv', skiprows=1, sep = \";\")\n\n\n#soil_data\n\n\n\n\n\n\n\n\nrfc_1,NA\n\n\n\n\n0\nrfc_2,NA\n\n\n1\nrfc_3,NA\n\n\n2\nsoil_depth_1,NA\n\n\n3\nsoil_depth_2,NA\n\n\n4\nsoil_depth_3,NA\n\n\n5\npsoil_at_field_capacity,NA\n\n\n6\ng_soil_0,NA\n\n\n7\noffset_psoil,NA\n\n\n8\npedo_transfer_formulation,NA\n\n\n9\npsie,NA\n\n\n10\nb_camp,NA\n\n\n11\nsaturation_capacity_campbell,NA\n\n\n12\nksat_campbell,NA\n\n\n\n\n\n\n\n\n#soil_data_dict_ordered = soil_data_dict['parameter_value']\n\nOrderedDict([('rfc_1,NA',\n              OrderedDict([(0, 'rfc_2,NA'),\n                           (1, 'rfc_3,NA'),\n                           (2, 'soil_depth_1,NA'),\n                           (3, 'soil_depth_2,NA'),\n                           (4, 'soil_depth_3,NA'),\n                           (5, 'psoil_at_field_capacity,NA'),\n                           (6, 'g_soil_0,NA'),\n                           (7, 'offset_psoil,NA'),\n                           (8, 'pedo_transfer_formulation,NA'),\n                           (9, 'psie,NA'),\n                           (10, 'b_camp,NA'),\n                           (11, 'saturation_capacity_campbell,NA'),\n                           (12, 'ksat_campbell,NA')]))])\n\n\n\nExample: Read CSV file with Soil parameters\n\n#read_soil_file('/tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_campbell.csv')\n\n\nsource\n\n\n\nconvert_vwc_to_sws\n\n convert_vwc_to_sws (vwc_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil volumetric water content (m3.m-3) to water stock height (quantity as height in mm per m2 soil) by accounting for the respective layer thickness and rock fragment content. The volume of the water quantity per square metre results in the corresponding water stock height (m3 water per m2 soil as height in mm)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvwc_x\nfloat\n\nVolumetric Water Content m3.m-3\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nSoil Water Stock (mm)\n\n\n\n\nconvert_vwc_to_sws(1, layer_thickness=1)\n\n1000.0\n\n\n\nsource\n\n\nconvert_sws_to_vwc\n\n convert_sws_to_vwc (sws_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil water stock (quantity as height in mm per m2 soil) to volumetric water content (m3.m-3) by accounting for the respective layer thickness and rock fragment content\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsws_x\nfloat\n\nSoil Water Stock (mm)\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nVolumetric Water Content m3.m-3\n\n\n\n\nconvert_sws_to_vwc(1000, layer_thickness=1)\n\n1.0",
    "crumbs": [
      "Soil utils functions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pysureau",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "pysureau",
    "section": "Install",
    "text": "Install\nCode\npip install pysureau",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "pysureau",
    "section": "How to use",
    "text": "How to use\n\nRun pysureau_init(“path/to/folder”)",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "pysureau_init.html",
    "href": "pysureau_init.html",
    "title": "pysureau init",
    "section": "",
    "text": "source\n\npysureau_init\n\n pysureau_init (path:Optional[str]=None)\n\nFunction for creating the project’s main folder structure alongside with the necessary parameter files\n\npysureau_init(path = '/tmp')\n\nCSV file saved as /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_vg.csv\nCSV file saved as /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW/1_parameter_files/soil_parameters_campbell.csv\npysureau project created at /tmp/pysureau_project_ciZ64j6epyCqPxyavomxgW",
    "crumbs": [
      "pysureau init"
    ]
  },
  {
    "objectID": "parameter_validators.html",
    "href": "parameter_validators.html",
    "title": "Data and parameter validators",
    "section": "",
    "text": "Soil data validator\n\nsource\n\nSoilParameterValidatorCampbell\n\n SoilParameterValidatorCampbell (rfc_1:float, rfc_2:float, rfc_3:float,\n                                 soil_depth_1:float, soil_depth_2:float,\n                                 soil_depth_3:float, psie:float,\n                                 b_camp:float, g_soil_0:float,\n                                 offset_psoil:float, ksat_campbell:float,\n                                 psoil_at_field_capacity:float,\n                                 pedo_transfer_formulation:float,\n                                 saturation_capacity_campbell:str,\n                                 soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nSoilParameterValidatorVg\n\n SoilParameterValidatorVg (rfc_1:float, rfc_2:float, rfc_3:float,\n                           soil_depth_1:float, soil_depth_2:float,\n                           soil_depth_3:float, psie:float, n_vg:float,\n                           i_vg:float, ksat_vg:float, g_soil_0:float,\n                           alpha_vg:float, offset_psoil:float,\n                           residual_capacity_vg:float,\n                           saturation_capacity_vg:float,\n                           psoil_at_field_capacity:float,\n                           pedo_transfer_formulation:str,\n                           soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nClimate data validator\n\n\nPlant data Validator",
    "crumbs": [
      "Data and parameter validators"
    ]
  }
]