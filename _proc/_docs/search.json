[
  {
    "objectID": "pysureau_utils.html",
    "href": "pysureau_utils.html",
    "title": "pysureau utils functions",
    "section": "",
    "text": "source\n\ndict_to_csv\n\n dict_to_csv (dictionary:Dict, filename:str, path:pathlib._local.Path)\n\nFunction for converting a dictionary that contains parameters into a CSV file\n\n\n\n\nType\nDetails\n\n\n\n\ndictionary\nDict\nDictionary\n\n\nfilename\nstr\nFilename\n\n\npath\nPath\nPath where the csv file will be stored\n\n\nReturns\nDataFrame",
    "crumbs": [
      "pysureau utils functions"
    ]
  },
  {
    "objectID": "plant_utils.html",
    "href": "plant_utils.html",
    "title": "Plant utils functions",
    "section": "",
    "text": "source\n\nrs_comp\n\n rs_comp (pi_ft:float, e_symp:float, psi:float)\n\nCompute Rs from pmin (resolution from Bartlet et al 2012 EcolLett and email Herve Cochard 19/06/2015)\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nturgor_comp\n\n turgor_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nTurgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_turgor_from_psi\n\n compute_turgor_from_psi (pi_ft:float, e_symp:float, psi:List)\n\nComputes Turgor pressure from Pressure-Volume curves parameters and water potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\npsi\nList\nList of Water potential of the organ (MPa)\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute turgor\n\ncompute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[1, 2, 3])\n\narray([0., 0., 0.])\n\n\n\nError: Function only return zeros\n\nfor each_psi in range(1, 10):\n    print(compute_turgor_from_psi(pi_ft=2, e_symp=3, psi=[each_psi]))\n\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n[0.]\n\n\n\nsource\n\n\n\n\nosmo_comp\n\n osmo_comp (pi_ft:float, r_stemp:float)\n\nCompute osmotic potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\npsi_total_symp_comp\n\n psi_total_symp_comp (pi_ft:float, e_symp:float, r_stemp:float)\n\nCompute Total potential\n\n\n\n\nType\nDetails\n\n\n\n\npi_ft\nfloat\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nr_stemp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nstomatal_regulation_turgor\n\n stomatal_regulation_turgor (turgor_pressure:float,\n                             max_turgor_pressure:float, e_max:float,\n                             e_cuti:float)\n\nThis function computes stomatal regulation if stomatal closure is limited (linearly) by turgor pressure\n\n\n\n\nType\nDetails\n\n\n\n\nturgor_pressure\nfloat\nTurgor pressure\n\n\nmax_turgor_pressure\nfloat\nMaximum turgor pressure,\n\n\ne_max\nfloat\nUnknown parameter definition\n\n\ne_cuti\nfloat\nResidual Transpiration\n\n\nReturns\narray\n\n\n\n\n\nExample: Compute Stomatal Regulation\n\nstomatal_regulation_turgor(\n    turgor_pressure=1, max_turgor_pressure=2, e_max=3, e_cuti=4\n)\n\narray([1.5, 3. ])\n\n\n\nsource\n\n\n\nplc_comp\n\n plc_comp (psi:float, slope:float, p50:float)\n\nCompute Percentage loss of conductivity\n\n\n\n\nType\nDetails\n\n\n\n\npsi\nfloat\nUnknown parameter definition\n\n\nslope\nfloat\nUnknown parameter definition\n\n\np50\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nplc_prime_comp\n\n plc_prime_comp (plc:float, slope:float)\n\nThis function computes PLC Prime from PLC current value\n\n\n\n\nType\nDetails\n\n\n\n\nplc\nfloat\nComputed using the plc_comp function\n\n\nslope\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ngs_curve\n\n gs_curve (x:float, slope_gs:float, p50_gs:float, psi_start_closing:float,\n           psi_close:float, pi_ft:float, e_symp:float,\n           turgor_pressure_at_gs_max:float, gs_max:float,\n           transpiration_model:str=['jarvis', 'granier'],\n           stomatal_reg_formulation:str=['sigmoid', 'piecewise_linear',\n           'turgor'])\n\nTo obtain plots of the gs regulation curve\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nfloat\n\nUnknown parameter definition\n\n\nslope_gs\nfloat\n\nUnknown parameter definition\n\n\np50_gs\nfloat\n\nUnknown parameter definition\n\n\npsi_start_closing\nfloat\n\nUnknown parameter definition\n\n\npsi_close\nfloat\n\nUnknown parameter definition\n\n\npi_ft\nfloat\n\nOsmotic potential at full turgor (MPa)\n\n\ne_symp\nfloat\n\nModulus of elastoicoty of the Symplasm (MPa/%)\n\n\nturgor_pressure_at_gs_max\nfloat\n\nUnknown parameter definition\n\n\ngs_max\nfloat\n\nUnknown parameter definition\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nstomatal_reg_formulation\nstr\n[‘sigmoid’, ‘piecewise_linear’, ‘turgor’]\nType of regulation to be used for stomatal response to leaf symplasmic water potential.\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_gmin\n\n compute_gmin (leaf_temp:float, gmin_20:float, t_phase:float, q10_1:float,\n               q10_2:float, gmin_temp_off=False)\n\nCalculate minimum conductance (gmin) following Cochard et al. (2019). Equantion 31 and 32 from SurEau-Ecos paper\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nleaf_temp\nfloat\n\nTemperature of the leaf (degC)\n\n\ngmin_20\nfloat\n\nleaf conductance at 20 degC\n\n\nt_phase\nfloat\n\nTemperature for phase transition of gmin\n\n\nq10_1\nfloat\n\nQ10 values for g_min= f(T) below T_phase\n\n\nq10_2\nfloat\n\nQ10 values for g_cuti = f(T) above T_phase\n\n\ngmin_temp_off\nbool\nFalse\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_emin\n\n compute_emin (gmin:float, vpd:float, g_bl:float, g_crown:float,\n               air_pressure:float=101.3)\n\nCalculate minimum transpiration (emin)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngmin\nfloat\n\nMinimum conductance\n\n\nvpd\nfloat\n\nVapor Pressure Deficit (kPa)\n\n\ng_bl\nfloat\n\nUnknown parameter definition\n\n\ng_crown\nfloat\n\nConductance of the tree crown. Calculated using compute_g_crown function\n\n\nair_pressure\nfloat\n101.3\nSurface air pressure (kPa)\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncompute_dfmc\n\n compute_dfmc (vpd:float, fm0=5.43, fm1=52.91, m=0.64)\n\nCompute dead fuel moisture content from VPD following De Dios et al. (2015)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvpd\nfloat\n\nVapor pressure deficit (kPA)\n\n\nfm0\nfloat\n5.43\nMinimum fuel moisture content (% dry weight)\n\n\nfm1\nfloat\n52.91\nMaximum fuel moisture content (% dry weight)\n\n\nm\nfloat\n0.64\nRate of decay\n\n\nReturns\nfloat\n\nFuel moisture content (% dry weight)\n\n\n\n\nsource\n\n\ndistribute_conductances\n\n distribute_conductances (k_plant_init:float, ri:float,\n                          frac_leaf_sym:float=0.4)\n\nCalcultate hydraulic conductances in the different portions of the plant (trunk, leaf and root) according to predetermined rules\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nk_plant_init\nfloat\n\nConductance of the plant from root to leaf\n\n\nri\nfloat\n\nRoot distribution within the soil layers.\n\n\nfrac_leaf_sym\nfloat\n0.4\nProportion of k_plant_init assigned to the leaf (apoplasm to symplasm pathway)\n\n\nReturns\nDict\n\n\n\n\n\n\nExample: Distribute conductances\n\ndistribute_conductances(k_plant_init=1, ri=2, frac_leaf_sym=0.4)\n\ndefaultdict(list,\n            {'k_slapo_init': 5.0,\n             'k_lsym_init': 2.5,\n             'k_rsapo_init': 5.0,\n             'k_plant_init': 1})\n\n\n\nsource\n\n\n\ncompute_g_crown\n\n compute_g_crown (g_crown0:float, wind_speed:float)\n\nCalcultate g_crown\n\n\n\n\nType\nDetails\n\n\n\n\ng_crown0\nfloat\nReference tree crown conductance\n\n\nwind_speed\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mmolm2s_to_mm\n\n convert_flux_from_mmolm2s_to_mm (x:float, time_step:float, lai:float)\n\nConvert an instantaneous flux in mmol.m-2Leaf.s-1 to a amount in mm (L.m2soil) over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\nconvert_flux_from_mm_to_mmolm2s\n\n convert_flux_from_mm_to_mmolm2s (x:float, time_step:float, lai:float)\n\nConvert flux in L.m-2soil to an instantaneous flux in mmol/m-2leaf.s-1 over a defined time period\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nThe amount of water in mm (L.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncalculate_ebound_mm_granier\n\n calculate_ebound_mm_granier (etp:float, lai:float, a:float=-0.006,\n                              b:float=0.134, c:float=0)\n\nNo description found in R source code\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\netp\nfloat\n\nUnknown parameter definition\n\n\nlai\nfloat\n\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\na\nfloat\n-0.006\nUnknown parameter definition\n\n\nb\nfloat\n0.134\nUnknown parameter definition\n\n\nc\nfloat\n0\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\n\nsource\n\n\ncalculate_ebound_granier\n\n calculate_ebound_granier (pet:float, lai:float, time_step:float)\n\nNo description found in R source code\n\n\n\n\nType\nDetails\n\n\n\n\npet\nfloat\nUnknown parameter definition\n\n\nlai\nfloat\nLeaf area index of the stand (m2leaf.m-2soil)\n\n\ntime_step\nfloat\nTime step (in hours)\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Calculate ebound\n\ncalculate_ebound_granier(pet=1, lai=2, time_step=3)\n\n0.6275720164609054\n\n\n\nsource\n\n\n\ncompute_tleaf\n\n compute_tleaf (t_air:float, par:float, potential_par:float,\n                wind_speed:float, relative_humidity:int, gs:float,\n                g_cuti:float, e_inst:float, psi_leaf:float,\n                leaf_size:float=50, leaf_angle:int=45,\n                turn_off_eb:bool=False, transpiration_model:str=['jarvis',\n                'granier'])\n\nCompute leaf temperature and Vapour Pressure deficit\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nt_air\nfloat\n\nAir temperature (degC)\n\n\npar\nfloat\n\nUnknown parameter definition\n\n\npotential_par\nfloat\n\nUnknown parameter definition. Calculated using potential_par function?\n\n\nwind_speed\nfloat\n\nUnknown parameter definition (m/s)\n\n\nrelative_humidity\nint\n\nAir relative_humidity(%)\n\n\ngs\nfloat\n\nStomatal conductance\n\n\ng_cuti\nfloat\n\nleaf conductance\n\n\ne_inst\nfloat\n\nUnknown parameter definition\n\n\npsi_leaf\nfloat\n\nUnknown parameter definition\n\n\nleaf_size\nfloat\n50\nCharacteristic dimension from vegetation params in mm i.e. 1 (pine needle) to 3000 (banana leaf)\n\n\nleaf_angle\nint\n45\nLeaf angle (depuis le plan horizontal : 0-90 deg)\n\n\nturn_off_eb\nbool\nFalse\nUnknown parameter definition. Tleaf Energy balance?\n\n\ntranspiration_model\nstr\n[‘jarvis’, ‘granier’]\nTranspiration model type\n\n\nReturns\nDict\n\nDictionary with parameters\n\n\n\n\nExample: Compute tleaf\n\ncompute_tleaf(\n    t_air=60,\n    par=100,\n    potential_par=1,\n    wind_speed=3,\n    relative_humidity=60,\n    gs=1,\n    g_cuti=2,\n    e_inst=3,\n    psi_leaf=-4,\n    leaf_size=50,\n    leaf_angle=45,\n    turn_off_eb=False,\n    transpiration_model='jarvis',\n)\n\ndefaultdict(list,\n            {'t_leaf': 60.394042704329365,\n             'g_bl': 3076.697970227172,\n             'vpd_leaf': 7.823071542236241,\n             'vpd_air': 7.978058190496631,\n             'delta_t': 0.39404270432936683})\n\n\n\nsource\n\n\n\ncreate_empty_vegetation_parameter_file\n\n create_empty_vegetation_parameter_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the vegetation parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nRead vegetation file\n\nsource\n\n\n\nread_vegetation_file\n\n read_vegetation_file (file_path:pathlib._local.Path,\n                       modeling_options:Dict, sep:str=';')\n\nFunction for reading a data frame containing information about vegetation characteristics\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nmodeling_options\nDict\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n;\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\n\n\n\n\n\nExample: Read vegetation CSV file\nmodeling_options_dict = create_modeling_options( time_step_for_evapo=2, reset_swc=True, avoid_water_soil_transfer=True, constant_climate=False, defoliation=True, soil_evapo=True, threshold_mortality=51, etp_formulation=‘pt’, rn_formulation=‘linear’, comp_options_for_evapo=‘custom’, stomatal_reg_formulation=‘turgor’, transpiration_model=‘jarvis’, numerical_scheme=‘implicit’, pedo_transfer_formulation=‘vg’, )\nread_vegetation_file( file_path=‘./sample_data/vegetation_example_wide.csv’, modeling_options=modeling_options_dict, sep=‘,’, )\n\nsource\n\n\n\nk_series_sum\n\n k_series_sum (k1:float, k2:float)\n\nFunction to sum 2 conductances in series",
    "crumbs": [
      "Plant utils functions"
    ]
  },
  {
    "objectID": "soil_utils.html",
    "href": "soil_utils.html",
    "title": "Soil utils functions",
    "section": "",
    "text": "source\n\ncompute_b\n\n compute_b (lv:float)\n\nCalculate b used to compute the B of the Gardnar-Cowen model\n\n\n\n\nType\nDetails\n\n\n\n\nlv\nfloat\nlength of fine root per unit volume\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_b_gc\n\n compute_b_gc (la:float, b:float, root_radius:float)\n\nCalculate B Gardner cowen thhe scaling factor for soil conductance\n\n\n\n\nType\nDetails\n\n\n\n\nla\nfloat\nUnknown parameter definition\n\n\nb\nfloat\nUnknown parameter definition\n\n\nroot_radius\nfloat\nCalculated using the compute_b function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil\n\n compute_k_soil (rew:float, i_vg:float, n_vg:float, k_sat_vg:float,\n                 b_gc:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\ni_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nk_sat_vg\nfloat\nUnknown parameter definition\n\n\nb_gc\nfloat\nCalculated using the compute_b_gc function\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_k_soil_camp\n\n compute_k_soil_camp (sws:float, tsc:float, b_camp:float,\n                      k_sat_campbell:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nk_sat_campbell\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil\n\n compute_p_soil (rew:float, alpha_vg:float, n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nrew\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_p_soil_camp\n\n compute_p_soil_camp (sws:float, tsc:float, b_camp:float, psie:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\nsws\nfloat\nUnknown parameter definition\n\n\ntsc\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\ncompute_theta_at_given_p_soil\n\n compute_theta_at_given_p_soil (psi_target:float, theta_res:float,\n                                theta_sat:float, alpha_vg:float,\n                                n_vg:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\ntheta_res\nfloat\nUnknown parameter definition\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\nalpha_vg\nfloat\nUnknown parameter definition\n\n\nn_vg\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter\n\ncompute_theta_at_given_p_soil(\n    psi_target=2, theta_res=3, theta_sat=4, alpha_vg=5, n_vg=1.1\n)\n\n3.316227675107904\n\n\n\ncompute_theta_at_given_p_soil(\n    psi_target=np.array([1.5, 2]),\n    theta_res=np.array([3, -2]),\n    theta_sat=np.array([-6, -7]),\n    alpha_vg=np.array([9.02, 2.9]),\n    n_vg=np.array([-1.5, 0.001]),\n)\n\narray([-5.99999970e+000, -6.51316634e+303])\n\n\n\nsource\n\n\n\ncompute_theta_at_given_p_soil_camp\n\n compute_theta_at_given_p_soil_camp (theta_sat:float, psi_target:float,\n                                     psie:float, b_camp:float)\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheta_sat\nfloat\nUnknown parameter definition\n\n\npsi_target\nfloat\nUnknown parameter definition\n\n\npsie\nfloat\nUnknown parameter definition\n\n\nb_camp\nfloat\nUnknown parameter definition\n\n\nReturns\nfloat\n\n\n\n\n\nExample: Compute theta parameter for Campbell formulation\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=-1.5, theta_sat=0.39, psie=-0.025, b_camp=-4.0\n)\n\n0.14012860366560284\n\n\n\ncompute_theta_at_given_p_soil_camp(\n    psi_target=np.array([-1.5, -2]),\n    theta_sat=np.array([0.70]),\n    psie=np.array([-0.025, -4]),\n    b_camp=np.array([-4.0, -6]),\n)\n\narray([0.25151288, 0.78572343])\n\n\n\nsource\n\n\n\ncreate_empty_soil_parameter_files\n\n create_empty_soil_parameter_files (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the soil parameters\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary files for user input\n\n\n\n\nsource\n\n\nread_soil_file\n\n read_soil_file (file_path:pathlib._local.Path, sep:str=',')\n\nFunction for reading a CSV file containing soil parameters information\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfile_path\nPath\n\nPath to the sureau_parameter_files folder containing the csv files with parameter values i.e path/to/sureau_parameter_files/file_name.csv\n\n\nsep\nstr\n,\nCSV file separator can be ‘,’ or ‘;’\n\n\nReturns\nDict\n\nDictionary with soil parameters\n\n\n\n\nsource\n\n\nconvert_vwc_to_sws\n\n convert_vwc_to_sws (vwc_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil volumetric water content (m3.m-3) to water stock height (quantity as height in mm per m2 soil) by accounting for the respective layer thickness and rock fragment content. The volume of the water quantity per square metre results in the corresponding water stock height (m3 water per m2 soil as height in mm)\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvwc_x\nfloat\n\nVolumetric Water Content m3.m-3\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nSoil Water Stock (mm)\n\n\n\n\nconvert_vwc_to_sws(1, layer_thickness=1)\n\n1000.0\n\n\n\nsource\n\n\nconvert_sws_to_vwc\n\n convert_sws_to_vwc (sws_x:float, layer_thickness:float, rfc:int=0)\n\nConvert soil water stock (quantity as height in mm per m2 soil) to volumetric water content (m3.m-3) by accounting for the respective layer thickness and rock fragment content\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsws_x\nfloat\n\nSoil Water Stock (mm)\n\n\nlayer_thickness\nfloat\n\nSoil layer thickness in meters?\n\n\nrfc\nint\n0\nRock Fragment Content (%)\n\n\nReturns\nfloat\n\nVolumetric Water Content m3.m-3\n\n\n\n\nconvert_sws_to_vwc(1000, layer_thickness=1)\n\n1.0",
    "crumbs": [
      "Soil utils functions"
    ]
  },
  {
    "objectID": "parameter_validators.html",
    "href": "parameter_validators.html",
    "title": "Parameter validators",
    "section": "",
    "text": "Soil data validator\n\nsource\n\nSoilParameterValidatorCampbell\n\n SoilParameterValidatorCampbell (rfc_1:float, rfc_2:float, rfc_3:float,\n                                 soil_depth_1:float, soil_depth_2:float,\n                                 soil_depth_3:float, psie:float,\n                                 b_camp:float, g_soil_0:float,\n                                 offset_psoil:float, ksat_campbell:float,\n                                 psoil_at_field_capacity:float,\n                                 saturation_capacity_campbell:float,\n                                 pedo_transfer_formulation:str,\n                                 soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nSoilParameterValidatorVg\n\n SoilParameterValidatorVg (rfc_1:float, rfc_2:float, rfc_3:float,\n                           soil_depth_1:float, soil_depth_2:float,\n                           soil_depth_3:float, psie:float, n_vg:float,\n                           i_vg:float, ksat_vg:float, g_soil_0:float,\n                           alpha_vg:float, offset_psoil:float,\n                           residual_capacity_vg:float,\n                           saturation_capacity_vg:float,\n                           psoil_at_field_capacity:float,\n                           pedo_transfer_formulation:str,\n                           soil_formulation:str)\n\n*!!! abstract “Usage Documentation” Models\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\n\n\nClimate data validator\n\n\nPlant data Validator",
    "crumbs": [
      "Parameter validators"
    ]
  },
  {
    "objectID": "pysureau_init.html",
    "href": "pysureau_init.html",
    "title": "pysureau init",
    "section": "",
    "text": "source\n\npysureau_init\n\n pysureau_init (path:Optional[str]=None)\n\nFunction for creating the project’s main folder structure alongside with the necessary parameter files\n\npysureau_init(path='/tmp')\n\nCSV parameter file saved at /tmp/pysureau_project_X3BDY8ymUVqi4mojYMNDrC/1_parameter_files/soil_parameters_vg.csv\nCSV parameter file saved at /tmp/pysureau_project_X3BDY8ymUVqi4mojYMNDrC/1_parameter_files/soil_parameters_campbell.csv\nCSV parameter file saved at /tmp/pysureau_project_X3BDY8ymUVqi4mojYMNDrC/1_parameter_files/vegetation_parameters.csv\npysureau project created at /tmp/pysureau_project_X3BDY8ymUVqi4mojYMNDrC\n\n\n\nshortuuid.uuid()\n\n'2zksDk5x'",
    "crumbs": [
      "pysureau init"
    ]
  },
  {
    "objectID": "create_modeling_options.html",
    "href": "create_modeling_options.html",
    "title": "Create modeling options",
    "section": "",
    "text": "# def create_modeling_options(\n#   latitude:float, # Numerical value indicating the latitude of the stand\n#   longitude:float, # Numerical value indicating the longitude of the stand\n#   year_start:int, # Numeric indicating the start year for the simulation (must match the dates of the input climate data file)\n#   year_end:int,   # Numeric indicating the end year for the simulation (must match the dates of the input climate data file)\n#   output_path:str = \"./sureau_outputs\",  # Path to folder where a CSV output result file will be saved. By default `None` which means that no file is written\n#   time_step_for_evapo: int = 1,  # Numerical value (in hours) indicating the time step for the main evapotranspiration loop. Should be one of the following 1,2,4,6,8\n#   resolution_output: str = 'subdaily',  # the resolution chosen to write variables in files, `subdaily`, `daily` or `yearly`.\n#   output_type: str = \"simple\",  # The output variables of the model that should be written in the output model file.\n#   output_overwrite: bool = False,  # Boolean indicating whether the output result file can be overwritten if it already exists\n#   defoliation: bool = False,  # Boolean indicating whether trees should loose leaves when`occurs.cavitation` occurs of the above part of plant. Defoliation starts only when PLC_Leaf &gt; 10% .\n#   threshold_mortality: int = 90,  # Percentange value indicating the percentage loss of conductivity above which the plant is considered dead and simulation stops for the current year.\n#   transpiration_model: str = 'jarvis',  # Transpiration model type. Either  or 'granier'\n#   transpiration_granier_arg_a:float = -0.006, # Unknown parameter definition\n#   transpiration_granier_arg_b:float = 0.134, # Unknown parameter definition\n#   transpiration_granier_arg_c:float = 0, # Unknown parameter definition\n#   pet_formulation: str = 'pt',  # Formulation of ETP to be used, either `pt` (Priestley-Taylor) or `penman` (Penmman)\n#   rn_formulation: str = 'linacre',  # Method to be used to calculate net radiation from global radiation, either `linacre`  or 'linear' (the linear method is not implemnted yet)\n#   constant_climate: bool = False,  # Boolian indicating whether the climate should be considered constant or not\n#   comp_options_for_evapo: str = 'normal',  # Option to be used for the loops (voir avec Francois). Choose between 'normal', 'accurate','fast' or 'custom'\n#   custom_small_time_step_in_sec: int = 600,  # Time step in seconds. Use if comp_options_for_evapo is set to `custom`\n#   lcav: int = 1,  # Boolean (0/1) to offset cavitation release from the apoplasm of leaves\n#   scav: int = 1,  # Boolean (0/1) to offset cavitation release from the apoplasm of stem\n#   eord: int = 1,  # Unknown parameter definition\n#   numerical_scheme: str = 'implicit',   # Method to be used, either \"implicit\", \"semi-implicit\" (Xu) or 'explicit'\n#   stomatal_reg_formulation: str = 'sigmoid',  # Type of regulation to be used for stomatal response to leaf symplasmic water potential, either `sigmoid`, `piecewise_linear` or 'turgor'\n#   print_prog: bool = True,  # Print progress of simulation to console (T/F)?\n# -&gt; Dict:\n#   'Create a dictionary containing modeling options that can be used as an input in run.SurEauR'#\n#   # Validate the function parameter types -------------------------------------\n#\n#   # Make sure output_path str\n#   assert isinstance(\n#       output_path, str\n#   ), f'output_path must be a string not a {type(output_path)}'#\n#   if not os.path.isdir(output_path):\n#       raise ValueError(\n#           f'Directory {output_path}, does not exist, check presence or spelling'\n#       )\n#\n#   assert isinstance(\n#       output_path, str\n#   ), f'output_path must be a string not a {type(output_path)}'\n#\n#   # Latitude\n#   assert (\n#       isinstance(latitude, float) | isinstance(latitude, int)\n#       and 95 &gt;= latitude &gt;= -95\n#   ), 'Provide latitude as coordinates points bewteen -90 and 90 i.e. latitude = 41.40338'\n#\n#   # Longitude\n#   assert (\n#       isinstance(longitude, float) | isinstance(longitude, int)\n#       and 180 &gt;= longitude &gt;= -180\n#   ), 'Provide longitude as coordinates points bewteen -180 and 180 i.e. longitude = 179.001'\n#\n#   # year_start\n#   assert (\n#       isinstance(year_start, int) and 3000 &gt;= year_start &gt; 0\n#   ), 'year_start must be a integer value between 0-3000'\n#\n#   # year_end\n#   assert (\n#       isinstance(year_end, int) and 3000 &gt;= year_end &gt; 0\n#   ), 'year_end must be a integer value between 0-3000'\n#\n#   # Compare end_year_simulation is larger than start_year_simulation\n#   assert (\n#       year_start &lt;= year_end\n#   ), f'year_start ({year_start}) is larger than year_end ({year_end})'\n#\n#   # Time step\n#   assert time_step_for_evapo in [\n#       \"variable\",\n#       1,\n#       2,\n#       4,\n#       6,\n#   ], 'time_step_for_evap must be set as 1, 2, 4, 6 or \"variable\"'\n#\n#   # Make sure that resolution output only has three options\n#   assert (\n#       resolution_output\n#       in [\n#           'subdaily',\n#           'daily',\n#           'yearly',\n#       ]\n#   ), f'{resolution_output} not a valid option for resolution_output, select \"subdaily\", \"daily\" or \"yearly\"'\n#\n#   # Make sure that output_type only has four options\n#   assert (\n#       output_type\n#       in [\n#           \"simple\",\n#           \"diagnostic\",\n#           \"LFMC\",\n#           \"forest_diback\",\n#       ]\n#   ), f'{output_type} not a valid option for output_type, select \"simple\", \"diagnostic\", \"LFMC\" or \"forest_diback\"'#\n#   # output_overwrite\n#   assert isinstance(output_overwrite, bool), 'output_overwrite must be a boolean (True/False)'\n#\n#   assert isinstance(\n#       constant_climate, bool\n#   ), 'constant_climate must be a boolean (True/False)'#\n#   assert isinstance(\n#       defoliation, bool\n#   ), 'defoliation must be a boolean (True/False)'#\n#   assert (\n#       isinstance(threshold_mortality, int) and 50 &lt;= threshold_mortality &lt;= 100\n#   ), 'threshold_mortality must be a integer between 50 and 100'#\n#   assert pet_formulation in [\n#       'pt',\n#       'penman',\n#   ], f'{pet_formulation} not a valid option for pet_formulation, choose \"pt\" or \"penman\"'#\n#   assert rn_formulation in [\n#       'linacre',\n#       'linear',\n#   ], f'{rn_formulation} not a valid option for, choose \"linacre\" or \"linear\"'#\n#   assert (\n#       comp_options_for_evapo\n#       in [\n#           'normal',\n#           'accurate',\n#           'fast',\n#           'custom',\n#       ]\n#   ), f'{comp_options_for_evapo} not a valid option for comp_options_for_evapo, choose \"normal\", \"accurate\", \"fast\" or \"custom\" '#\n#   assert (\n#       stomatal_reg_formulation\n#       in [\n#           'sigmoid',\n#           'piecewise_linear',\n#           'turgor',\n#       ]\n#   ), f'{stomatal_reg_formulation} not a valid option for stomatal_reg_formulation, choose \"sigmoid\", \"piecewise_linear\" or \"turgor\" '#\n#   assert transpiration_model in [\n#       'jarvis',\n#       'granier',\n#   ], f'{transpiration_model} not a valid option for transpiration_model, choose  \"jarvis\" or \"granier\"'#\n#   assert (\n#       numerical_scheme\n#       in [\n#           'implicit',\n#           'semi-implicit',\n#           'explicit',\n#       ]\n#   ), f'{numerical_scheme} not a valid option for numerical_scheme, choose  \"implicit\", \"semi-implicit\" or \"explicit\"'#\n#   # Create array with time steps for the evapo --------------------------------\n#   if time_step_for_evapo == \"variable\":\n#       time = np.array([0, 6, 12, 14, 16, 22])\n#       raise ValueError('time_step_for_evapo set to \"variable\". This has not been implemented yet')#\n#   elif time_step_for_evapo != \"variable\":\n#       time = np.arange(0, 24, time_step_for_evapo, dtype=int)#\n#   # Create comp_options -------------------------------------------------------\n#   comp_options = collections.defaultdict(list)\n#\n#   # Every 10min, 6min, 3min, 1min\n#   if comp_options_for_evapo == 'normal':\n#           # Add key value pairs to the comp_dictionary\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array(\n#               [6, 10, 20, 60]\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every 10 seconds\n#   if comp_options_for_evapo == 'accurate':\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array([600])\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every hours, every 10 min\n#   if comp_options_for_evapo == 'fast':\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array([\n#               1, 6]\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every customSmallTimeStepInSec\n#   if comp_options_for_evapo == 'custom':\n#\n#           comp_options['numerical_scheme'] = numerical_scheme#\n#           comp_options['nsmalltimesteps'] = (\n#               (time_step_for_evapo * 3600) / custom_small_time_step_in_sec\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # Create empty dictionary for storing modeling options ----------------------\n#   modeling_options = collections.defaultdict(list)\n#\n#   # Append parameters to dictionary\n#   modeling_options['year_start'] = year_start\n#   modeling_options['year_end'] = year_end\n#   modeling_options['resolution_output'] = resolution_output\n#   modeling_options['output_type'] = output_type\n#   modeling_options['constant_climate'] = constant_climate\n#   modeling_options['pet_formulation'] = pet_formulation\n#   modeling_options['rn_formulation'] = rn_formulation\n#   modeling_options['time_step_for_evapo'] = time_step_for_evapo\n#   modeling_options['time'] = time\n#   modeling_options['latitude'] = latitude\n#   modeling_options['longitude'] = longitude\n#   modeling_options['comp_options'] = comp_options\n#   modeling_options['stomatal_reg_formulation'] = stomatal_reg_formulation\n#   modeling_options['defoliation'] = defoliation\n#   modeling_options['threshold_mortality'] = threshold_mortality\n#   modeling_options['transpiration_model'] = transpiration_model\n#   modeling_options['print_prog'] = print_prog\n#   modeling_options['stop_simulation_dead_plant'] = print_prog\n#   modeling_options['transpiration_granier_args'] = collections.defaultdict(list,{\"a\":transpiration_granier_arg_a,\n#                                                                                  \"b\":transpiration_granier_arg_b,\n#                                                                                  \"c\":transpiration_granier_arg_c})\n#   # Create folder for storing output ------------------------------------------\n#   # Create random number for naming folder\n#   random_number = random.randint(1, 10000)\n#\n#   # Join path for storing output\n#\n#   output_path = os.path.join(output_path, f'sureau_output_{datetime.datetime.now().strftime(\"%Y_%m_%d\")}_{random_number}')\n#   modeling_options['output_path'] = output_path #\n#   # New folder\n#   if not os.path.exists(output_path):\n#       # Create folder\n#       os.mkdir(output_path)\n#       print(f'Directory for storing output created at {output_path}')#\n#   # Overwrite folder\n#   elif os.path.exists(output_path) and output_overwrite is True:\n#       shutil.rmtree(output_path)\n#       os.makedirs(output_path)\n#       modeling_options['output_path'] = output_path\n#       print(f'Directory ({output_path}) for storing output overwritten')#\n#   # Errors\n#   elif os.path.exists(output_path) and output_overwrite is False:\n#       raise ValueError(\n#           \"File already exists and 'output_overwrite' option is set to False, change the 'output_path' or set 'overwrite' to True\"\n#       )#\n#   else:\n#       raise ValueError(\n#           'Error creating folder in modeling_options function'\n#       )\n#\n#   return modeling_options\n\n\nsource\n\ncreate_empty_modeling_options_file\n\n create_empty_modeling_options_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the modeling options file\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary file for user input",
    "crumbs": [
      "Create modeling options"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pysureau",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "pysureau",
    "section": "Install",
    "text": "Install\nCode\npip install pysureau",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "pysureau",
    "section": "How to use",
    "text": "How to use\n\nRun pysureau_init(“path/to/folder”)",
    "crumbs": [
      "pysureau"
    ]
  },
  {
    "objectID": "modeling_options_utils.html",
    "href": "modeling_options_utils.html",
    "title": "Create modeling options",
    "section": "",
    "text": "# def create_modeling_options(\n#   latitude:float, # Numerical value indicating the latitude of the stand\n#   longitude:float, # Numerical value indicating the longitude of the stand\n#   year_start:int, # Numeric indicating the start year for the simulation (must match the dates of the input climate data file)\n#   year_end:int,   # Numeric indicating the end year for the simulation (must match the dates of the input climate data file)\n#   output_path:str = \"./sureau_outputs\",  # Path to folder where a CSV output result file will be saved. By default `None` which means that no file is written\n#   time_step_for_evapo: int = 1,  # Numerical value (in hours) indicating the time step for the main evapotranspiration loop. Should be one of the following 1,2,4,6,8\n#   resolution_output: str = 'subdaily',  # the resolution chosen to write variables in files, `subdaily`, `daily` or `yearly`.\n#   output_type: str = \"simple\",  # The output variables of the model that should be written in the output model file.\n#   output_overwrite: bool = False,  # Boolean indicating whether the output result file can be overwritten if it already exists\n#   defoliation: bool = False,  # Boolean indicating whether trees should loose leaves when`occurs.cavitation` occurs of the above part of plant. Defoliation starts only when PLC_Leaf &gt; 10% .\n#   threshold_mortality: int = 90,  # Percentange value indicating the percentage loss of conductivity above which the plant is considered dead and simulation stops for the current year.\n#   transpiration_model: str = 'jarvis',  # Transpiration model type. Either  or 'granier'\n#   transpiration_granier_arg_a:float = -0.006, # Unknown parameter definition\n#   transpiration_granier_arg_b:float = 0.134, # Unknown parameter definition\n#   transpiration_granier_arg_c:float = 0, # Unknown parameter definition\n#   pet_formulation: str = 'pt',  # Formulation of ETP to be used, either `pt` (Priestley-Taylor) or `penman` (Penmman)\n#   rn_formulation: str = 'linacre',  # Method to be used to calculate net radiation from global radiation, either `linacre`  or 'linear' (the linear method is not implemnted yet)\n#   constant_climate: bool = False,  # Boolian indicating whether the climate should be considered constant or not\n#   comp_options_for_evapo: str = 'normal',  # Option to be used for the loops (voir avec Francois). Choose between 'normal', 'accurate','fast' or 'custom'\n#   custom_small_time_step_in_sec: int = 600,  # Time step in seconds. Use if comp_options_for_evapo is set to `custom`\n#   lcav: int = 1,  # Boolean (0/1) to offset cavitation release from the apoplasm of leaves\n#   scav: int = 1,  # Boolean (0/1) to offset cavitation release from the apoplasm of stem\n#   eord: int = 1,  # Unknown parameter definition\n#   numerical_scheme: str = 'implicit',   # Method to be used, either \"implicit\", \"semi-implicit\" (Xu) or 'explicit'\n#   stomatal_reg_formulation: str = 'sigmoid',  # Type of regulation to be used for stomatal response to leaf symplasmic water potential, either `sigmoid`, `piecewise_linear` or 'turgor'\n#   print_prog: bool = True,  # Print progress of simulation to console (T/F)?\n# -&gt; Dict:\n#   'Create a dictionary containing modeling options that can be used as an input in run.SurEauR'#\n#   # Validate the function parameter types -------------------------------------\n#\n#   # Make sure output_path str\n#   assert isinstance(\n#       output_path, str\n#   ), f'output_path must be a string not a {type(output_path)}'#\n#   if not os.path.isdir(output_path):\n#       raise ValueError(\n#           f'Directory {output_path}, does not exist, check presence or spelling'\n#       )\n#\n#   assert isinstance(\n#       output_path, str\n#   ), f'output_path must be a string not a {type(output_path)}'\n#\n#   # Latitude\n#   assert (\n#       isinstance(latitude, float) | isinstance(latitude, int)\n#       and 95 &gt;= latitude &gt;= -95\n#   ), 'Provide latitude as coordinates points bewteen -90 and 90 i.e. latitude = 41.40338'\n#\n#   # Longitude\n#   assert (\n#       isinstance(longitude, float) | isinstance(longitude, int)\n#       and 180 &gt;= longitude &gt;= -180\n#   ), 'Provide longitude as coordinates points bewteen -180 and 180 i.e. longitude = 179.001'\n#\n#   # year_start\n#   assert (\n#       isinstance(year_start, int) and 3000 &gt;= year_start &gt; 0\n#   ), 'year_start must be a integer value between 0-3000'\n#\n#   # year_end\n#   assert (\n#       isinstance(year_end, int) and 3000 &gt;= year_end &gt; 0\n#   ), 'year_end must be a integer value between 0-3000'\n#\n#   # Compare end_year_simulation is larger than start_year_simulation\n#   assert (\n#       year_start &lt;= year_end\n#   ), f'year_start ({year_start}) is larger than year_end ({year_end})'\n#\n#   # Time step\n#   assert time_step_for_evapo in [\n#       \"variable\",\n#       1,\n#       2,\n#       4,\n#       6,\n#   ], 'time_step_for_evap must be set as 1, 2, 4, 6 or \"variable\"'\n#\n#   # Make sure that resolution output only has three options\n#   assert (\n#       resolution_output\n#       in [\n#           'subdaily',\n#           'daily',\n#           'yearly',\n#       ]\n#   ), f'{resolution_output} not a valid option for resolution_output, select \"subdaily\", \"daily\" or \"yearly\"'\n#\n#   # Make sure that output_type only has four options\n#   assert (\n#       output_type\n#       in [\n#           \"simple\",\n#           \"diagnostic\",\n#           \"LFMC\",\n#           \"forest_diback\",\n#       ]\n#   ), f'{output_type} not a valid option for output_type, select \"simple\", \"diagnostic\", \"LFMC\" or \"forest_diback\"'#\n#   # output_overwrite\n#   assert isinstance(output_overwrite, bool), 'output_overwrite must be a boolean (True/False)'\n#\n#   assert isinstance(\n#       constant_climate, bool\n#   ), 'constant_climate must be a boolean (True/False)'#\n#   assert isinstance(\n#       defoliation, bool\n#   ), 'defoliation must be a boolean (True/False)'#\n#   assert (\n#       isinstance(threshold_mortality, int) and 50 &lt;= threshold_mortality &lt;= 100\n#   ), 'threshold_mortality must be a integer between 50 and 100'#\n#   assert pet_formulation in [\n#       'pt',\n#       'penman',\n#   ], f'{pet_formulation} not a valid option for pet_formulation, choose \"pt\" or \"penman\"'#\n#   assert rn_formulation in [\n#       'linacre',\n#       'linear',\n#   ], f'{rn_formulation} not a valid option for, choose \"linacre\" or \"linear\"'#\n#   assert (\n#       comp_options_for_evapo\n#       in [\n#           'normal',\n#           'accurate',\n#           'fast',\n#           'custom',\n#       ]\n#   ), f'{comp_options_for_evapo} not a valid option for comp_options_for_evapo, choose \"normal\", \"accurate\", \"fast\" or \"custom\" '#\n#   assert (\n#       stomatal_reg_formulation\n#       in [\n#           'sigmoid',\n#           'piecewise_linear',\n#           'turgor',\n#       ]\n#   ), f'{stomatal_reg_formulation} not a valid option for stomatal_reg_formulation, choose \"sigmoid\", \"piecewise_linear\" or \"turgor\" '#\n#   assert transpiration_model in [\n#       'jarvis',\n#       'granier',\n#   ], f'{transpiration_model} not a valid option for transpiration_model, choose  \"jarvis\" or \"granier\"'#\n#   assert (\n#       numerical_scheme\n#       in [\n#           'implicit',\n#           'semi-implicit',\n#           'explicit',\n#       ]\n#   ), f'{numerical_scheme} not a valid option for numerical_scheme, choose  \"implicit\", \"semi-implicit\" or \"explicit\"'#\n#   # Create array with time steps for the evapo --------------------------------\n#   if time_step_for_evapo == \"variable\":\n#       time = np.array([0, 6, 12, 14, 16, 22])\n#       raise ValueError('time_step_for_evapo set to \"variable\". This has not been implemented yet')#\n#   elif time_step_for_evapo != \"variable\":\n#       time = np.arange(0, 24, time_step_for_evapo, dtype=int)#\n#   # Create comp_options -------------------------------------------------------\n#   comp_options = collections.defaultdict(list)\n#\n#   # Every 10min, 6min, 3min, 1min\n#   if comp_options_for_evapo == 'normal':\n#           # Add key value pairs to the comp_dictionary\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array(\n#               [6, 10, 20, 60]\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every 10 seconds\n#   if comp_options_for_evapo == 'accurate':\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array([600])\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every hours, every 10 min\n#   if comp_options_for_evapo == 'fast':\n#           comp_options['numerical_scheme'] = numerical_scheme\n#           comp_options['nsmalltimesteps'] = time_step_for_evapo * np.array([\n#               1, 6]\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # every customSmallTimeStepInSec\n#   if comp_options_for_evapo == 'custom':\n#\n#           comp_options['numerical_scheme'] = numerical_scheme#\n#           comp_options['nsmalltimesteps'] = (\n#               (time_step_for_evapo * 3600) / custom_small_time_step_in_sec\n#           )\n#           comp_options['lsym'] = 1\n#           comp_options['ssym'] = 1\n#           comp_options['clapo'] = 1\n#           comp_options['ctapo'] = 1\n#           comp_options['eord'] = eord\n#           comp_options['lcav'] = lcav\n#           comp_options['scav'] = scav#\n#   # Create empty dictionary for storing modeling options ----------------------\n#   modeling_options = collections.defaultdict(list)\n#\n#   # Append parameters to dictionary\n#   modeling_options['year_start'] = year_start\n#   modeling_options['year_end'] = year_end\n#   modeling_options['resolution_output'] = resolution_output\n#   modeling_options['output_type'] = output_type\n#   modeling_options['constant_climate'] = constant_climate\n#   modeling_options['pet_formulation'] = pet_formulation\n#   modeling_options['rn_formulation'] = rn_formulation\n#   modeling_options['time_step_for_evapo'] = time_step_for_evapo\n#   modeling_options['time'] = time\n#   modeling_options['latitude'] = latitude\n#   modeling_options['longitude'] = longitude\n#   modeling_options['comp_options'] = comp_options\n#   modeling_options['stomatal_reg_formulation'] = stomatal_reg_formulation\n#   modeling_options['defoliation'] = defoliation\n#   modeling_options['threshold_mortality'] = threshold_mortality\n#   modeling_options['transpiration_model'] = transpiration_model\n#   modeling_options['print_prog'] = print_prog\n#   modeling_options['stop_simulation_dead_plant'] = print_prog\n#   modeling_options['transpiration_granier_args'] = collections.defaultdict(list,{\"a\":transpiration_granier_arg_a,\n#                                                                                  \"b\":transpiration_granier_arg_b,\n#                                                                                  \"c\":transpiration_granier_arg_c})\n#   # Create folder for storing output ------------------------------------------\n#   # Create random number for naming folder\n#   random_number = random.randint(1, 10000)\n#\n#   # Join path for storing output\n#\n#   output_path = os.path.join(output_path, f'sureau_output_{datetime.datetime.now().strftime(\"%Y_%m_%d\")}_{random_number}')\n#   modeling_options['output_path'] = output_path #\n#   # New folder\n#   if not os.path.exists(output_path):\n#       # Create folder\n#       os.mkdir(output_path)\n#       print(f'Directory for storing output created at {output_path}')#\n#   # Overwrite folder\n#   elif os.path.exists(output_path) and output_overwrite is True:\n#       shutil.rmtree(output_path)\n#       os.makedirs(output_path)\n#       modeling_options['output_path'] = output_path\n#       print(f'Directory ({output_path}) for storing output overwritten')#\n#   # Errors\n#   elif os.path.exists(output_path) and output_overwrite is False:\n#       raise ValueError(\n#           \"File already exists and 'output_overwrite' option is set to False, change the 'output_path' or set 'overwrite' to True\"\n#       )#\n#   else:\n#       raise ValueError(\n#           'Error creating folder in modeling_options function'\n#       )\n#\n#   return modeling_options\n\n\nsource\n\ncreate_empty_modeling_options_file\n\n create_empty_modeling_options_file (path:pathlib._local.Path)\n\nFunction for creating the CSV templates necessary for the modeling options file\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nPath\nPath to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory\n\n\nReturns\nDict\nReturn two dictionary file for user input",
    "crumbs": [
      "Create modeling options"
    ]
  }
]