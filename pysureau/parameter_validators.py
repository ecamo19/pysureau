# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_parameter_validators.ipynb.

# %% auto 0
__all__ = ['SoilParameterValidatorCampbell', 'SoilParameterValidatorVg', 'ModelingOptionsParameterValidator']

# %% ../nbs/06_parameter_validators.ipynb 3
# import os
# import numpy as np
# import pandas as pd
# import pandera as pa
# from typing import Dict
# from pathlib import Path
from typing import Literal
from pydantic import BaseModel, Field
# from pandera.typing import DataFrame Series

# %% ../nbs/06_parameter_validators.ipynb 5
# This class was created for validating the input dataframe
# If the data dont follow the structure specified the function will fail
# class SoilDataValidator(pa.SchemaModel):
#    Schema for validating the input soil parameter file
#
#    parameter_me: Series = pa.Field(description=Column containing parameter names)
#    parameter_value: Series = pa.Field(description=Parameter values)
#
#    # Added for making sure that it only accepts the columns specified above
#    class Config:
#        strict = True

# %% ../nbs/06_parameter_validators.ipynb 6
class SoilParameterValidatorCampbell(BaseModel):
    rfc_1: float
    rfc_2: float
    rfc_3: float
    soil_depth_1: float
    soil_depth_2: float
    soil_depth_3: float
    psie: float
    b_camp: float
    g_soil_0: float
    offset_psoil: float
    ksat_campbell: float
    psoil_at_field_capacity: float
    saturation_capacity_campbell: float
    pedo_transfer_formulation: str
    soil_formulation: str

# %% ../nbs/06_parameter_validators.ipynb 7
class SoilParameterValidatorVg(BaseModel):
    rfc_1: float
    rfc_2: float
    rfc_3: float
    soil_depth_1: float
    soil_depth_2: float
    soil_depth_3: float
    psie: float
    n_vg: float
    i_vg: float
    ksat_vg: float
    g_soil_0: float
    alpha_vg: float
    offset_psoil: float
    residual_capacity_vg: float
    saturation_capacity_vg: float
    psoil_at_field_capacity: float
    pedo_transfer_formulation: str
    soil_formulation: str

# %% ../nbs/06_parameter_validators.ipynb 9
class ModelingOptionsParameterValidator(BaseModel):
    eord: Literal[0, 1]
    lcav: Literal[0, 1]
    scav: Literal[0, 1]
    pet_formulation: Literal['pt', 'penman']
    rn_formulation: Literal['linacre', 'linear']
    transpiration_model:Literal['jarvis','granier']
    time_step_for_evapo: Literal["variable", 1, 2, 4, 6]
    resolution_output: Literal['subdaily','daily','yearly']
    numerical_scheme: Literal['implicit','semi-implicit','explicit']
    output_type: Literal["simple","diagnostic","LFMC","forest_diback",]
    comp_options_for_evapo: Literal['normal','accurate','fast','custom']
    stomatal_reg_formulation: Literal['sigmoid', 'piecewise_linear','turgor']
    year_end: int
    year_start: int
    custom_small_time_step_in_sec: int 
    print_prog: bool
    defoliation: bool
    constant_climate: bool
    output_overwrite: bool    
    transpiration_granier_arg_a: float
    transpiration_granier_arg_b: float
    transpiration_granier_arg_c: float
    latitude: float = Field(ge = -91, le = 91)
    longitude: float = Field(ge = -181, le = 181)
    threshold_mortality: float = Field(ge = 0, le = 100)

# %% ../nbs/06_parameter_validators.ipynb 11
# This class is created for validating the input climate dataframe
# If the data dont follow the structure in the class the function will fail
# class ClimateDataValidator(pa.SchemaModel):
#    Schema for validating the climate data
#
#    DATE: Series[np.datetime64] = pa.Field(
#        description=Date with format 1991/12/23
#    )
#    Tair_min: Series[float] = pa.Field(
#        description=Minimum air temperature of the day (degC)
#    )
#    Tair_max: Series[float] = pa.Field(
#        description= Maximum air temperature of the day (degC)
#    )
#    Tair_mean: Series[float] = pa.Field(
#        description=Mean air temperature of the day (degC)
#    )
#    RG_sum: Series[float] = pa.Field(
#        ge=0 description=Global radiation (MJ/m2)
#    )
#
#    PPT_sum: Series[float] = pa.Field(ge=0 description=precipitation (mm))
#
#    RHair_min: Series[float] = pa.Field(
#        ge=0 le=100 description=Minimum relative humidity of the day (%)
#    )
#    RHair_max: Series[float] = pa.Field(
#        ge=0
#        le=100
#        description=Maximum relative humidity of the day (%)
#        coerce=True
#    )
#    RHair_mean: Series[float] = pa.Field(
#        ge=0 le=100 description=Mean relative humidity of the day (%)
#    )
#    WS_mean: Series[float] = pa.Field(
#        ge=0 description=Mean wind speed of the day (m/s)
#    )
#
#    # Added for making sure that it only accepts the columns specified above
#    class Config:
#        strict = True

# %% ../nbs/06_parameter_validators.ipynb 13
# class PlantDataValidator(pa.SchemaModel):
#    Schema for validating the input CSV spreadsheet with trait parameters.
#
#    # setting commomn params for WB_veg (regardless of the options) -------------
#    apofrac_leaf: Series[float] = pa.Field(
#        description=Apoplasmic Fraction (Unitless) in leaves coerce=True
#    )
#    apofrac_stem: Series[float] = pa.Field(
#        description=Stem apoplasmic fraction of the wood water volume
#        coerce=True
#    )
#    betarootprofile: Series[float] = pa.Field(
#        description=Parameter for the distribution of roots in the soil (unitless??)
#        coerce=True
#    )
#    canopystorageparam: Series[float] = pa.Field(
#        description=Depth of water that can be retained by leaves and trunks per unit of leaf area index (l/m2leaf used to compute the canopy water storage capacity as a function of LAI)
#        coerce=True
#    )
#    c_lapoinit: Series[float] = pa.Field(
#        description=Capacitance of the leaf apoplasm coerce=True
#    )
#    c_sapoinit: Series[float] = pa.Field(
#        description=Capacitance of the stem apoplasm coerce=True
#    )
#    epsilonsym_leaf: Series[float] = pa.Field(
#        description=Modulus of elasticity (MPa) in leaves coerce=True
#    )
#    epsilonsym_stem: Series[float] = pa.Field(
#        description=Modulus of elasticity of the stem symplasm coerce=True
#    )
#    foliage: Series[str] = pa.Field(
#        isin=[evergreen deciduous forced] description=Vegetation type
#    )
#    froottoleaf: Series[float] = pa.Field(
#        description=Root to leaf ratio (unitless??) coerce=True
#    )
#    ftrbtoleaf: Series[float] = pa.Field(
#        description=No definition found coerce=True
#    )
#    gmin20: Series[float] = pa.Field(
#        description=Minimum conductance (gmin mmol/m2leaf/s) at the reference temperature (same as cuticular conductance)
#        coerce=True
#    )
#    gmin_s: Series[float] = pa.Field(
#        description=Conductance (gmin) of the stem (same as k_plant??)
#        coerce=True
#    )
#    k_ssyminit: Series[float] = pa.Field(
#        description=No definition found coerce=True
#    )
#    k: Series[float] = pa.Field(
#        description=Light extinction coefficient (Unitless??) of the vegetation layer
#        coerce=True
#    )
#    k_plantinit: Series[float] = pa.Field(
#        description=Hydaulic conductance ( [mmol/MPa/s/m2leaf]) of the plant from soil to leaves
#        coerce=True
#    )
#    ldmc: Series[float] = pa.Field(
#        ge=0
#        description=Leaf dry matter content (mgMS/g) measured for fully watered leaves
#        coerce=True
#    )
#    lma: Series[float] = pa.Field(
#        description=Leaf mass per area (g/m2leaf) coerce=True
#    )
#    p50_vc_leaf: Series[float] = pa.Field(
#        description=Water potential (MPa) causing 50% Cavitation in the vulnerability curve
#        coerce=True
#    )
#    p50_vc_stem: Series[float] = pa.Field(
#        description=Water potential causing 50 % loss of stem hydraulic conductance
#        coerce=True
#    )
#    pifullturgor_stem: Series[float] = pa.Field(
#        description=Osmotic potential at full turgor of the stem symplasm
#        coerce=True
#    )
#    pifullturgor_leaf: Series[float] = pa.Field(
#        description=Osmotic Potentia (MPa) at full turgor in leaves
#        coerce=True
#    )
#    q10_1_gmin: Series[float] = pa.Field(
#        description=Q10 (unitless??) value for gmin = f(T) <= Tphase_gmin
#        coerce=True
#    )
#    q10_2_gmin: Series[float] = pa.Field(
#        description=Q10 unitless??) value for gmin = f(T)  > Tphase_gmin
#        coerce=True
#    )
#    rootradius: Series[float] = pa.Field(
#        description=radius of roots (m) coerce=True
#    )
#    symfrac_stem: Series[float] = pa.Field(
#        description=Stem symplasmic fraction of the wood water volume
#        coerce=True
#    )
#    slope_vc_leaf: Series[float] = pa.Field(
#        description=Slope (%/MPa) of the vulnerability curve coerce=True
#    )
#    slope_vc_stem: Series[float] = pa.Field(
#        description=Slope of rate of stem embolism spread at Ïˆ50S coerce=True
#    )
#    tphase_gmin: Series[float] = pa.Field(
#        description=Temperature for phase transition (degC) of minimum conductance
#        coerce=True
#    )
#    vol_stem: Series[float] = pa.Field(
#        description=Volume of tissue of the stem (includes the root trunk and branches)
#        coerce=True
#    )
