# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_parameter_validators.ipynb.

# %% auto 0
__all__ = ['SoilParameterValidatorCampbell', 'SoilParameterValidatorVg', 'ModelingOptionsParameterValidator',
           'VegetationParameterValidator']

# %% ../nbs/06_parameter_validators.ipynb 3
from typing import Literal
from pydantic import BaseModel, Field

# %% ../nbs/06_parameter_validators.ipynb 5
class SoilParameterValidatorCampbell(BaseModel):
    rfc_1: float
    rfc_2: float
    rfc_3: float
    soil_depth_1: float
    soil_depth_2: float
    soil_depth_3: float
    psie: float
    b_camp: float
    g_soil_0: float
    offset_psoil: float
    ksat_campbell: float
    psoil_at_field_capacity: float
    saturation_capacity_campbell: float
    pedo_transfer_formulation: str
    soil_formulation: str

# %% ../nbs/06_parameter_validators.ipynb 6
class SoilParameterValidatorVg(BaseModel):
    rfc_1: float
    rfc_2: float
    rfc_3: float
    soil_depth_1: float
    soil_depth_2: float
    soil_depth_3: float
    psie: float
    n_vg: float
    i_vg: float
    ksat_vg: float
    g_soil_0: float
    alpha_vg: float
    offset_psoil: float
    residual_capacity_vg: float
    saturation_capacity_vg: float
    psoil_at_field_capacity: float
    pedo_transfer_formulation: str
    soil_formulation: str

# %% ../nbs/06_parameter_validators.ipynb 8
class ModelingOptionsParameterValidator(BaseModel):
    eord: Literal[0, 1]
    lcav: Literal[0, 1]
    scav: Literal[0, 1]
    pet_formulation: Literal['pt', 'penman']
    rn_formulation: Literal['linacre', 'linear']
    transpiration_model: Literal['jarvis', 'granier']
    time_step_for_evapo: Literal['variable', 1, 2, 4, 6]
    resolution_output: Literal['subdaily', 'daily', 'yearly']
    numerical_scheme: Literal['implicit', 'semi-implicit', 'explicit']
    output_type: Literal[
        'simple',
        'diagnostic',
        'LFMC',
        'forest_diback',
    ]
    comp_options_for_evapo: Literal['normal', 'accurate', 'fast', 'custom']
    stomatal_reg_formulation: Literal['sigmoid', 'piecewise_linear', 'turgor']
    year_end: int
    year_start: int
    custom_small_time_step_in_sec: int
    print_prog: bool
    defoliation: bool
    constant_climate: bool
    output_overwrite: bool
    transpiration_granier_arg_a: float
    transpiration_granier_arg_b: float
    transpiration_granier_arg_c: float
    latitude: float = Field(ge=-91, le=91)
    longitude: float = Field(ge=-181, le=181)
    threshold_mortality: float = Field(ge=0, le=100)

# %% ../nbs/06_parameter_validators.ipynb 10
class VegetationParameterValidator(BaseModel):
    # apo_frac_leaf Apoplasmic Fraction (Unitless in leaves
    apo_frac_leaf: float = Field(ge=0)

    # apofrac_stem Stem apoplasmic fraction of the wood water volume
    apo_frac_stem: float = Field(ge=0)

    # betarootprofile Parameter for the distribution of roots in the soil (unitless??
    beta_root_profile: float = Field(ge=0)

    # canopystorageparam: Depth of water that can be retained by leaves
    # and trunks per unit of leaf area index (l/m2leaf used to compute the canopy water storage capacity as a function of LAI
    canopy_storage_param: float = Field(ge=0)

    # c_lapoinit:Capacitance of the leaf apoplasm
    c_lapo_init: float = Field(ge=-1000, lt=1000)

    # c_sapoinit: Capacitance of the stem apoplasm
    c_sapo_init: float = Field(ge=-1000, lt=1000)

    day_start: float = Field(ge=1800, lt=3000)

    day_end: float = Field(ge=1800, lt=3000)

    # epsilonsym_leaf: Modulus of elasticity (MPa in leaves
    epsilon_sym_leaf: float = Field(ge=0)

    # epsilonsym_stem: Modulus of elasticity of the stem symplasm
    epsilon_sym_stem: float = Field(ge=0)

    f_crit: float = Field(ge=0)

    # foliage:  Vegetation type
    foliage: Literal['evergreen', 'deciduous', 'forced']

    # froottoleaf: Root to leaf ratio (unitless??
    f_root_to_leaf: float = Field(ge=-1000, lt=1000)

    # ftrbtoleaf: No definition found
    f_trb_to_leaf: float = Field(ge=-1000, lt=1000)

    g_crown0: float = Field(ge=0)

    group: str

    # gmin_s: Conductance (gmin of the stem (same as k_plant??
    gmin_s: float = Field(ge=0)

    # gmin20: Minimum conductance (gmin mmol/m2leaf/s at the reference
    # temperature (same as cuticular conductance
    gmin20: float = Field(ge=0)

    gs_max: float = Field(ge=0)

    gs_night: float = Field(ge=0)

    jarvis_par: float = Field(ge=0)

    # k: Light extinction coefficient (Unitless?? of the vegetation layer
    k: float = Field(ge=0)

    # k_plantinit: Hydaulic conductance ( [mmol/MPa/s/m2leaf] of the plant
    # from soil to leaves)
    k_plant_init: float = Field(ge=0)

    # k_ssyminit: No definition found
    k_ssym_init: float = Field(ge=0)

    leaf_angle: float = Field(ge=0)

    leaf_size: float = Field(ge=0)

    life_form: str

    # ldmc: Leaf dry matter content (mgMS/g measured for fully watered leaves)
    lmdc: float = Field(ge=0)

    # lma: Leaf mass per area (g/m2leaf
    lma: float = Field(ge=0)

    nb_day_lai: float = Field(ge=0)

    p12_gs: float = Field(ge=0)

    # p50_vc_leaf: Water potential (MPa causing 50% Cavitation in the
    # vulnerability curve)
    p50_vc_leaf: float = Field(ge=0)

    # p50_vc_stem: Water potential causing 50 % loss of stem hydraulic
    # conductance
    p50_vc_stem: float = Field(ge=0)

    p88_gs: float = Field(ge=0)

    # pifullturgor_leaf: Osmotic Potentia (MPa at full turgor in leaves)
    pi_full_turgor_leaf: float = Field(ge=0)

    # pifullturgor_stem: Osmotic potential at full turgor of the stem
    # symplasm
    pi_full_turgor_stem: float = Field(ge=0)

    psi_close: float = Field(ge=0)

    psi_start_closing: float = Field(ge=-1000, lt=1000)

    pt_coeff: float = Field(ge=0)

    # q10_1_gmin:Q10 (unitless?? value for gmin = f(T <= Tphase_gmin)
    q10_1_gmin: float = Field(ge=0)

    # q10_2_gmin: Q10 unitless?? value for gmin = f(T  > Tphase_gmin)
    q10_2_gmin: float = Field(ge=0)

    # rootradius: radius of roots (m)
    root_radius: float = Field(ge=0)

    # slope_vc_leaf: Slope (%/MPa of the vulnerability curve
    slope_vc_leaf: float = Field(ge=-1000, lt=1000)

    # slope_vc_stem: Slope of rate of stem embolism spread at Ïˆ50S
    slope_vc_stem: float = Field(ge=-1000, lt=1000)

    species: str

    # symfrac_stem:Stem symplasmic fraction of the wood water volume
    sym_frac_stem: float = Field(ge=0)

    sym_frac_leaf: float = Field(ge=0)

    t_base: float = Field(ge=0)

    t_gs_optim: float = Field(ge=0)

    t_gs_sens: float = Field(ge=0)

    # tphase_gmin: Temperature for phase transition (degC of minimum
    # conductance
    t_phase_gmin: float = Field(ge=0)

    turgor_pressure_at_gs_max: float = Field(ge=-1000, lt=1000)

    # vol_stem: Volume of tissue of the stem (includes the root trunk and
    # branches
    vol_stem: float = Field(ge=0)

# %% ../nbs/06_parameter_validators.ipynb 12
# This class is created for validating the input climate dataframe
# If the data dont follow the structure in the class the function will fail
# class ClimateDataValidator(pa.SchemaModel:
#    Schema for validating the climate data
#
#    DATE: Series[np.datetime64] = pa.Field(
#        Date with format 1991/12/23
#
#    Tair_min:
#        Minimum air temperature of the day (degC
#
#    Tair_max:
#         Maximum air temperature of the day (degC
#
#    Tair_mean:
#        Mean air temperature of the day (degC
#
#    RG_sum:
#        ge=0 Global radiation (MJ/m2
#
#
#    PPT_sum: ge=0 precipitation (mm
#
#    RHair_min:
#        ge=0 le=100 Minimum relative humidity of the day (%
#
#    RHair_max:
#        ge=0
#        le=100
#        Maximum relative humidity of the day (%
#
#
#    RHair_mean:
#        ge=0 le=100 Mean relative humidity of the day (%
#
#    WS_mean:
#        ge=0 Mean wind speed of the day (m/s
#
#
#    # Added for making sure that it only accepts the columns specified above
#    class Config:
#        strict = True
