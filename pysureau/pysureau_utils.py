# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_pysureau_utils.ipynb.

# %% auto 0
__all__ = ['dict_to_csv']

# %% ../nbs/00_pysureau_utils.ipynb 3
import os
import csv
import pandas as pd
from typing import Dict
from pathlib import Path, PosixPath
from pandera.typing import DataFrame

# %% ../nbs/00_pysureau_utils.ipynb 4
def _create_parameter_definitions_csv_file(
    filename: str,  # Filename
    path: Path,  # Path to the folder where the parameter files will be saved. If set to None then the files will be saved at the current working directory
):  # Return two Dataframe files for user input
    "Function for creating a CSV file with vegetation parameter definitions"

    # Assert parameters ---------------------------------------------------------
    assert isinstance(path, str) | isinstance(path, PosixPath), (
        f'Input path must be a str, not a {type(path).__name__}'
    )

    # Create path where the file should be saved --------------------------------
    path = Path(path)
    filename = os.path.join(path, filename)

    # Convert string to Path if provided ----------------------------------------
    path = Path(path)
    if os.path.exists(path):
        # Soil parameters for van Genuchten pedo transfer function
        definitions_list = [
            # Definitions for vegetation parameters
            'P50_VC_Leaf',
            'ψ50,L',
            'Water potential causing 50% Cavitation in the vulnerability curve',
            'MPa',
            'slope_VC_Leaf',
            'slopeL',
            'Slope of rate of leaf embolism spread at ψ50,L',
            '%/MPa',
            'epsilonSym_Leaf',
            'εL',
            'Modulus of elasticity of the leaf symplasm',
            'MPa',
            'PiFullTurgor_Leaf',
            'π0L',
            'Osmotic potential at full turgor of the leaf symplasm',
            'MPa',
            'apoFrac_Leaf',
            'αLApo',
            'Apoplasmic Fraction in leaves/Leaf apoplasmic fraction',
            'Unitless',
            'LDMC',
            'LDMC',
            'Leaf dry matter content (dry mass over saturated mass)',
            'mgMS/g??',
            'LMA',
            'LMA',
            'Leaf mass per area',
            'g/m2leaf',
            'K',
            'k',
            'Light extinction coefficient of the vegetation layer',
            'unitless',
            'k_PlantInit',
            'not found',
            'Hydaulic conductance of the plant from soil to leaves',
            'mmol/MPa/s/m2leaf?',
            'gmin20',
            'gcuti20',
            'Minimum conductance (gmin) at the reference temperature',
            'mmol/m2leaf/s-1',
            'TPhase_gmin',
            'TPhase',
            'Temperature for phase transition of minimum conductance/Temperature for transition phase of gcuti',
            'degC',
            'Q10_1_gmin',
            'Q10a',
            'Q10 value for gmin = f(T) &lt;= Tphase_gmin/ Temperature dependance of gcuti when T ≤ TPhase',
            'unitless',
            'Q10_2_gmin',
            'Q10b',
            'Q10 value for gmin = f(T) > Tphase_gmin/ Temperature dependance of gcuti when T > TPhase',
            'unitless',
            'gmin_S',
            'not found',
            'conductance (gmin) of the stem',
            'Unitless??',
            'canopyStorageParam',
            'cws',
            'Depth of water that can be retained by leaves and trunks per unit of leaf area index (used to compute the canopy water storage capacity as a function of LAI',
            'l/m2leaf',
            'rootRadius',
            'dR',
            'radius of roots',
            'meters',
            'fRootToLeaf',
            'RaLa',
            'Root-to-leaf area ratio',
            'unitless',
            'betaRootProfile',
            'β',
            'Parameter for the distribution of roots in the soil',
            'unitless',
            'PiFullTurgor_Stem',
            'π0S',
            'Osmotic potential at full turgor of the stem symplasm',
            'MPa',
            'epsilonSym_Stem',
            'εS',
            'Modulus of elasticity of the stem symplasm',
            'MPa',
            'apoFrac_Stem',
            'αSApo',
            'Stem apoplasmic fraction of the wood water volume',
            'Unitless',
            'symFrac_Stem',
            'αSSym',
            'Stem symplasmic fraction of the wood water volume',
            'Unitless',
            'vol_Stem',
            'VS',
            'Volume of tissue of the stem (includes the root, trunk and branches)',
            'L m−2 soil',
            'fTRBToLeaf',
            'Not found',
            'Definition not found',
            'Not found',
            'C_LApoInit',
            'CLApo',
            'Capacitance of the leaf apoplasm',
            'mmol m−2 leaf MPa−1',
            'C_SApoInit',
            'CSApo',
            'Capacitance of the stem apoplasm',
            'mmol m−2 leaf MPa−1',
            'P50_VC_Stem',
            'ψ50,S',
            'Water potential causing 50 % loss of stem hydraulic conductance',
            'MPa',
            'slope_VC_Stem',
            'slopeS',
            'Slope of rate of stem embolism spread at ψ50,S',
            '% MPa−1',
            'k_SSymInit',
            'Not found',
            'Definition not found',
            'Not found',
            'foliage',
            'Not found',
            'Definition not found',
            'Not applicable',
            'Not found',
            't0',
            'Initial date of the forcing period for leaf phenology',
            'Day of year',
            'Not found',
            'TD',
            'Minimum temperature to start cumulating temperature for budburst',
            '◦C',
            'Not found',
            'F∗',
            'Amount of forcing temperature to reach budburst',
            '◦C',
            'RAI',
            'RLAI',
            'LAI growth rate per day',
            'LAI d−1',
            'k_RSApoInit',
            'KR-SApo,max',
            'Maximum conductance from the root surface to the stem apoplasm',
            'mmol m−2 leaf s −1 MPa−1',
            'k_SLApoInit',
            'KSApo−LApo,max',
            'Maximum conductance from trunk apoplasm to the leaf apoplasm',
            'mmol m−2 leaf s −1 MPa−1',
            'Not found',
            'KSSym',
            'Conductance from the stem apoplasm to stem symplasm',
            'mmol m−2 leaf s −1 MPa−1',
            'k_LSymInit',
            'KLSym',
            'Conductance from the leaf apoplasm to leaf symplasm',
            'mmol m−2 leaf s −1 MPa−1',
            'Not found',
            'Succulence',
            'Leaf succulence (water content per unit of leaf area)',
            'g m−2 leaf',
            'P50_gs',
            'ψgs50',
            'Water potential causing 50 % stomatal closure',
            'MPa',
            'Not found',
            'slopegs',
            'Rate of decrease in stomatal conductance at ψgs,50',
            '% MPa−1',
            'Not found',
            'gstom_min',
            'Minimum stomatal conductance',
            'mmol m−2 leaf s −1',
            'Not found',
            'gstom_max',
            'Maximum stomatal conductance',
            'mmol m−2 leaf s −1',
            'Not found',
            'δ',
            'Response of gstom to light',
            'unitless',
            'Not found',
            'Toptim',
            'Temperature at maximal stomatal conductance',
            '◦C',
            'Not found',
            'Tsens',
            'Stomatal sensitivity to temperature',
            '◦C',
            'Not found',
            'θs',
            'Soil water content at saturation',
            'unitless',
            'Not found',
            'θr',
            'Residual soil water content',
            'unitless',
            'Not found',
            'α',
            'Inverse of the air entry potential',
            '1/MPa',
            'Not found',
            'n',
            'Pore size distribution index',
            'unitless',
            'Not found',
            'I',
            'Shape parameter for the Van Genuchten equation',
            'unitless',
            'Not found',
            'ksat',
            'Soil hydraulic conductivity at saturation',
            'mmol m−1 soil s −1 MPa−1',
            'Not found',
            'gsoil0',
            'Reference soil conductance to water vapor',
            'mmol m−2 soil s −1',
            # Definitions for modeling options parameters
            'latitude',
            'Not applicable',
            'Numerical value indicating the latitude of the stand',
            'NA',
            'longitude',
            'Not applicable',
            'Numerical value indicating the longitude of the stand',
            'NA',
            'year_start',
            'Not applicable',
            'Numeric indicating the start year for the simulation (must match the dates of the input climate data file)',
            'NA',
            'year_end',
            'Not applicable',
            'Numeric indicating the end year for the simulation (must match the dates of the input climate data file)',
            'NA',
            'output_path',
            'Not applicable',
            'Path to folder where a CSV output result file will be saved. By default `None` which means that no file is written',
            'NA',
            'time_step_for_evapo',
            'Not applicable',
            'Numerical value (in hours) indicating the time step for the main evapotranspiration loop. Should be one of the following 1,2,4,6,8',
            'NA',
            'resolution_output',
            'Not applicable',
            'Resolution chosen to write variables in files, `subdaily`, `daily` or `yearly`.',
            'NA',
            'output_type',
            'Not applicable',
            'The output variables of the model that should be written in the output model file.',
            'NA',
            'output_overwrite',
            'Not applicable',
            'Boolean indicating whether the output result file can be overwritten if it already exists',
            'NA',
            'defoliation',
            'Not applicable',
            'Boolean indicating whether trees should loose leaves when`occurs.cavitation` occurs of the above part of plant. Defoliation starts only when PLC_Leaf > 10% .',
            'NA',
            'threshold_mortality',
            'Not applicable',
            'Percentange value indicating the percentage loss of conductivity above which the plant is considered dead and simulation stops for the current year.',
            'NA',
            'transpiration_model',
            'Not applicable',
            "Transpiration model type. Either  or 'granier'",
            'NA',
            'transpiration_granier_arg_a',
            'Not applicable',
            'Unknown parameter definition',
            'NA',
            'transpiration_granier_arg_b',
            'Not applicable',
            'Unknown parameter definition',
            'NA',
            'transpiration_granier_arg_c',
            'Not applicable',
            'Unknown parameter definition',
            'NA',
            'pet_formulation',
            'Not applicable',
            'Formulation of ETP to be used, either `pt` (Priestley-Taylor) or `penman` (Penmman)',
            'NA',
            'rn_formulation',
            'Not applicable',
            "Method to be used to calculate net radiation from global radiation, either `linacre`  or 'linear' (the linear method is not implemnted yet)",
            'NA',
            'constant_climate',
            'Not applicable',
            'Boolian indicating whether the climate should be considered constant or not',
            'NA',
            'comp_options_for_evapo',
            'Not applicable',
            "Option to be used for the loops (voir avec Francois). Choose between 'normal', 'accurate','fast' or 'custom'",
            'NA',
            'custom_small_time_step_in_sec',
            'Not applicable',
            'Time step in seconds. Use if comp_options_for_evapo is set to `custom`',
            'NA',
            'lcav',
            'Not applicable',
            'Boolean (0/1) to offset cavitation release from the apoplasm of leaves',
            'NA',
            'scav',
            'Not applicable',
            'Boolean (0/1) to offset cavitation release from the apoplasm of stem',
            'NA',
            'eord',
            'Not applicable',
            'Unknown parameter definition',
            'NA',
            'numerical_scheme',
            'Not applicable',
            'Method to be used, either implicit, semi-implicit (Xu) or explicit',
            'NA',
            'stomatal_reg_formulation',
            'Not applicable',
            "Type of regulation to be used for stomatal response to leaf symplasmic water potential, either `sigmoid`, `piecewise_linear` or 'turgor'",
            'NA',
            'print_prog',
            'Not applicable',
            'Print progress of simulation to console (T/F)?',
            'NA',
        ]
        # Write to CSV files ----------------------------------------------------
        current_position = 0
        list_lenght = len(definitions_list)

        with open(filename, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)

            # Write header
            writer.writerow(
                [
                    'parameter_name_in_paper',
                    'parameter_name_in_Rcode',
                    'definition',
                    'units',
                ]
            )

            for _ in range(4, list_lenght + 1, 4):
                # Write data rows
                row_value = definitions_list[
                    current_position : (current_position + 4)
                ]
                writer.writerow(row_value)
                current_position = current_position + 4

    else:
        raise ValueError('Failed creating definitions_dict file')

# %% ../nbs/00_pysureau_utils.ipynb 5
def dict_to_csv(
    dictionary: Dict,  # Dictionary
    filename: str,  # Filename
    path: Path,  # Path where the csv file will be stored
) -> DataFrame:
    """
    Function for converting a dictionary that contains parameters into a CSV file
    """

    # Assert parameters ---------------------------------------------------------
    assert isinstance(dictionary, dict), (
        f'dictionay must by of class dict not {type(dictionary).__name__}'
    )

    assert isinstance(filename, str), (
        f'filename must by of class str not {type(filename).__name__}'
    )

    assert isinstance(path, str) | isinstance(path, PosixPath), (
        f'Input path must be a str, not a {type(path).__name__}'
    )

    # Convert string to Path if provided ----------------------------------------
    if os.path.exists(path):
        # Conver input path
        path = Path(path)

        filename = os.path.join(path, filename)

    else:
        raise FileNotFoundError(f'Path {path} not found')

    # Convert Dict into csv -----------------------------------------------------
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)

        # Write header
        writer.writerow(['parameter_name', 'parameter_value'])

        # Write data rows
        for each_param_name, each_param_value in dictionary.items():
            writer.writerow([each_param_name, each_param_value])

    print(f'CSV parameter file saved at {filename}')
